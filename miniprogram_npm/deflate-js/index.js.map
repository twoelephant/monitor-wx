{"version":3,"sources":["index.js","lib/rawinflate.js","lib/rawdeflate.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function () {\r\n\t\r\n\r\n\tmodule.exports = {\r\n\t\t'inflate': require('./lib/rawinflate.js'),\r\n\t\t'deflate': require('./lib/rawdeflate.js')\r\n\t};\r\n}());\r\n","/*\r\n * $Id: rawinflate.js,v 0.2 2009/03/01 18:32:24 dankogai Exp $\r\n *\r\n * original:\r\n * http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt\r\n */\r\n\r\n/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\r\n * Version: 1.0.0.1\r\n * LastModified: Dec 25 1999\r\n */\r\n\r\n/* Interface:\r\n * data = inflate(src);\r\n */\r\n\r\n(function () {\r\n\t/* constant parameters */\r\n\tvar WSIZE = 32768, // Sliding Window size\r\n\t\tSTORED_BLOCK = 0,\r\n\t\tSTATIC_TREES = 1,\r\n\t\tDYN_TREES = 2,\r\n\r\n\t/* for inflate */\r\n\t\tlbits = 9, // bits in base literal/length lookup table\r\n\t\tdbits = 6, // bits in base distance lookup table\r\n\r\n\t/* variables (inflate) */\r\n\t\tslide,\r\n\t\twp, // current position in slide\r\n\t\tfixed_tl = null, // inflate static\r\n\t\tfixed_td, // inflate static\r\n\t\tfixed_bl, // inflate static\r\n\t\tfixed_bd, // inflate static\r\n\t\tbit_buf, // bit buffer\r\n\t\tbit_len, // bits in bit buffer\r\n\t\tmethod,\r\n\t\teof,\r\n\t\tcopy_leng,\r\n\t\tcopy_dist,\r\n\t\ttl, // literal length decoder table\r\n\t\ttd, // literal distance decoder table\r\n\t\tbl, // number of bits decoded by tl\r\n\t\tbd, // number of bits decoded by td\r\n\r\n\t\tinflate_data,\r\n\t\tinflate_pos,\r\n\r\n\r\n/* constant tables (inflate) */\r\n\t\tMASK_BITS = [\r\n\t\t\t0x0000,\r\n\t\t\t0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\r\n\t\t\t0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff\r\n\t\t],\r\n\t\t// Tables for deflate from PKZIP's appnote.txt.\r\n\t\t// Copy lengths for literal codes 257..285\r\n\t\tcplens = [\r\n\t\t\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\r\n\t\t\t35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\r\n\t\t],\r\n/* note: see note #13 above about the 258 in this list. */\r\n\t\t// Extra bits for literal codes 257..285\r\n\t\tcplext = [\r\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\r\n\t\t\t3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99 // 99==invalid\r\n\t\t],\r\n\t\t// Copy offsets for distance codes 0..29\r\n\t\tcpdist = [\r\n\t\t\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\r\n\t\t\t257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\r\n\t\t\t8193, 12289, 16385, 24577\r\n\t\t],\r\n\t\t// Extra bits for distance codes\r\n\t\tcpdext = [\r\n\t\t\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\r\n\t\t\t7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\r\n\t\t\t12, 12, 13, 13\r\n\t\t],\r\n\t\t// Order of the bit length code lengths\r\n\t\tborder = [\r\n\t\t\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\r\n\t\t];\r\n\t/* objects (inflate) */\r\n\r\n\tfunction HuftList() {\r\n\t\tthis.next = null;\r\n\t\tthis.list = null;\r\n\t}\r\n\r\n\tfunction HuftNode() {\r\n\t\tthis.e = 0; // number of extra bits or operation\r\n\t\tthis.b = 0; // number of bits in this code or subcode\r\n\r\n\t\t// union\r\n\t\tthis.n = 0; // literal, length base, or distance base\r\n\t\tthis.t = null; // (HuftNode) pointer to next level of table\r\n\t}\r\n\r\n\t/*\r\n\t * @param b-  code lengths in bits (all assumed <= BMAX)\r\n\t * @param n- number of codes (assumed <= N_MAX)\r\n\t * @param s- number of simple-valued codes (0..s-1)\r\n\t * @param d- list of base values for non-simple codes\r\n\t * @param e- list of extra bits for non-simple codes\r\n\t * @param mm- maximum lookup bits\r\n\t */\r\n\tfunction HuftBuild(b, n, s, d, e, mm) {\r\n\t\tthis.BMAX = 16; // maximum bit length of any code\r\n\t\tthis.N_MAX = 288; // maximum number of codes in any set\r\n\t\tthis.status = 0; // 0: success, 1: incomplete table, 2: bad input\r\n\t\tthis.root = null; // (HuftList) starting table\r\n\t\tthis.m = 0; // maximum lookup bits, returns actual\r\n\r\n\t/* Given a list of code lengths and a maximum table size, make a set of\r\n\t   tables to decode that set of codes. Return zero on success, one if\r\n\t   the given code set is incomplete (the tables are still built in this\r\n\t   case), two if the input is invalid (all zero length codes or an\r\n\t   oversubscribed set of lengths), and three if not enough memory.\r\n\t   The code with value 256 is special, and the tables are constructed\r\n\t   so that no bits beyond that code are fetched when that code is\r\n\t   decoded. */\r\n\t\tvar a; // counter for codes of length k\r\n\t\tvar c = [];\r\n\t\tvar el; // length of EOB code (value 256)\r\n\t\tvar f; // i repeats in table every f entries\r\n\t\tvar g; // maximum code length\r\n\t\tvar h; // table level\r\n\t\tvar i; // counter, current code\r\n\t\tvar j; // counter\r\n\t\tvar k; // number of bits in current code\r\n\t\tvar lx = [];\r\n\t\tvar p; // pointer into c[], b[], or v[]\r\n\t\tvar pidx; // index of p\r\n\t\tvar q; // (HuftNode) points to current table\r\n\t\tvar r = new HuftNode(); // table entry for structure assignment\r\n\t\tvar u = [];\r\n\t\tvar v = [];\r\n\t\tvar w;\r\n\t\tvar x = [];\r\n\t\tvar xp; // pointer into x or c\r\n\t\tvar y; // number of dummy codes added\r\n\t\tvar z; // number of entries in current table\r\n\t\tvar o;\r\n\t\tvar tail; // (HuftList)\r\n\r\n\t\ttail = this.root = null;\r\n\r\n\t\t// bit length count table\r\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\r\n\t\t\tc[i] = 0;\r\n\t\t}\r\n\t\t// stack of bits per table\r\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\r\n\t\t\tlx[i] = 0;\r\n\t\t}\r\n\t\t// HuftNode[BMAX][]  table stack\r\n\t\tfor (i = 0; i < this.BMAX; i++) {\r\n\t\t\tu[i] = null;\r\n\t\t}\r\n\t\t// values in order of bit length\r\n\t\tfor (i = 0; i < this.N_MAX; i++) {\r\n\t\t\tv[i] = 0;\r\n\t\t}\r\n\t\t// bit offsets, then code stack\r\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\r\n\t\t\tx[i] = 0;\r\n\t\t}\r\n\r\n\t\t// Generate counts for each bit length\r\n\t\tel = n > 256 ? b[256] : this.BMAX; // set length of EOB code, if any\r\n\t\tp = b; pidx = 0;\r\n\t\ti = n;\r\n\t\tdo {\r\n\t\t\tc[p[pidx]]++; // assume all entries <= BMAX\r\n\t\t\tpidx++;\r\n\t\t} while (--i > 0);\r\n\t\tif (c[0] === n) { // null input--all zero length codes\r\n\t\t\tthis.root = null;\r\n\t\t\tthis.m = 0;\r\n\t\t\tthis.status = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Find minimum and maximum length, bound *m by those\r\n\t\tfor (j = 1; j <= this.BMAX; j++) {\r\n\t\t\tif (c[j] !== 0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tk = j; // minimum code length\r\n\t\tif (mm < j) {\r\n\t\t\tmm = j;\r\n\t\t}\r\n\t\tfor (i = this.BMAX; i !== 0; i--) {\r\n\t\t\tif (c[i] !== 0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tg = i; // maximum code length\r\n\t\tif (mm > i) {\r\n\t\t\tmm = i;\r\n\t\t}\r\n\r\n\t\t// Adjust last length count to fill out codes, if needed\r\n\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\r\n\t\t\tif ((y -= c[j]) < 0) {\r\n\t\t\t\tthis.status = 2; // bad input: more codes than bits\r\n\t\t\t\tthis.m = mm;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((y -= c[i]) < 0) {\r\n\t\t\tthis.status = 2;\r\n\t\t\tthis.m = mm;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tc[i] += y;\r\n\r\n\t\t// Generate starting offsets into the value table for each length\r\n\t\tx[1] = j = 0;\r\n\t\tp = c;\r\n\t\tpidx = 1;\r\n\t\txp = 2;\r\n\t\twhile (--i > 0) { // note that i == g from above\r\n\t\t\tx[xp++] = (j += p[pidx++]);\r\n\t\t}\r\n\r\n\t\t// Make a table of values in order of bit lengths\r\n\t\tp = b; pidx = 0;\r\n\t\ti = 0;\r\n\t\tdo {\r\n\t\t\tif ((j = p[pidx++]) !== 0) {\r\n\t\t\t\tv[x[j]++] = i;\r\n\t\t\t}\r\n\t\t} while (++i < n);\r\n\t\tn = x[g]; // set n to length of v\r\n\r\n\t\t// Generate the Huffman codes and for each, make the table entries\r\n\t\tx[0] = i = 0; // first Huffman code is zero\r\n\t\tp = v; pidx = 0; // grab values in bit order\r\n\t\th = -1; // no tables yet--level -1\r\n\t\tw = lx[0] = 0; // no bits decoded yet\r\n\t\tq = null; // ditto\r\n\t\tz = 0; // ditto\r\n\r\n\t\t// go through the bit lengths (k already is bits in shortest code)\r\n\t\tfor (null; k <= g; k++) {\r\n\t\t\ta = c[k];\r\n\t\t\twhile (a-- > 0) {\r\n\t\t\t\t// here i is the Huffman code of length k bits for value p[pidx]\r\n\t\t\t\t// make tables up to required level\r\n\t\t\t\twhile (k > w + lx[1 + h]) {\r\n\t\t\t\t\tw += lx[1 + h]; // add bits already decoded\r\n\t\t\t\t\th++;\r\n\r\n\t\t\t\t\t// compute minimum size table less than or equal to *m bits\r\n\t\t\t\t\tz = (z = g - w) > mm ? mm : z; // upper limit\r\n\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\r\n\t\t\t\t\t\t// too few codes for k-w bit table\r\n\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\r\n\t\t\t\t\t\txp = k;\r\n\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\r\n\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp]) {\r\n\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w + j > el && w < el) {\r\n\t\t\t\t\t\tj = el - w; // make EOB code end at table\r\n\t\t\t\t\t}\r\n\t\t\t\t\tz = 1 << j; // table entries for j-bit table\r\n\t\t\t\t\tlx[1 + h] = j; // set table size in stack\r\n\r\n\t\t\t\t\t// allocate and link in new table\r\n\t\t\t\t\tq = [];\r\n\t\t\t\t\tfor (o = 0; o < z; o++) {\r\n\t\t\t\t\t\tq[o] = new HuftNode();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!tail) {\r\n\t\t\t\t\t\ttail = this.root = new HuftList();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttail = tail.next = new HuftList();\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttail.next = null;\r\n\t\t\t\t\ttail.list = q;\r\n\t\t\t\t\tu[h] = q; // table starts after link\r\n\r\n\t\t\t\t\t/* connect to last table, if there is one */\r\n\t\t\t\t\tif (h > 0) {\r\n\t\t\t\t\t\tx[h] = i; // save pattern for backing up\r\n\t\t\t\t\t\tr.b = lx[h]; // bits to dump before this table\r\n\t\t\t\t\t\tr.e = 16 + j; // bits in this table\r\n\t\t\t\t\t\tr.t = q; // pointer to this table\r\n\t\t\t\t\t\tj = (i & ((1 << w) - 1)) >> (w - lx[h]);\r\n\t\t\t\t\t\tu[h - 1][j].e = r.e;\r\n\t\t\t\t\t\tu[h - 1][j].b = r.b;\r\n\t\t\t\t\t\tu[h - 1][j].n = r.n;\r\n\t\t\t\t\t\tu[h - 1][j].t = r.t;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set up table entry in r\r\n\t\t\t\tr.b = k - w;\r\n\t\t\t\tif (pidx >= n) {\r\n\t\t\t\t\tr.e = 99; // out of values--invalid code\r\n\t\t\t\t} else if (p[pidx] < s) {\r\n\t\t\t\t\tr.e = (p[pidx] < 256 ? 16 : 15); // 256 is end-of-block code\r\n\t\t\t\t\tr.n = p[pidx++]; // simple code is just the value\r\n\t\t\t\t} else {\r\n\t\t\t\t\tr.e = e[p[pidx] - s]; // non-simple--look up in lists\r\n\t\t\t\t\tr.n = d[p[pidx++] - s];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// fill code-like entries with r //\r\n\t\t\t\tf = 1 << (k - w);\r\n\t\t\t\tfor (j = i >> w; j < z; j += f) {\r\n\t\t\t\t\tq[j].e = r.e;\r\n\t\t\t\t\tq[j].b = r.b;\r\n\t\t\t\t\tq[j].n = r.n;\r\n\t\t\t\t\tq[j].t = r.t;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// backwards increment the k-bit code i\r\n\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>= 1) {\r\n\t\t\t\t\ti ^= j;\r\n\t\t\t\t}\r\n\t\t\t\ti ^= j;\r\n\r\n\t\t\t\t// backup over finished tables\r\n\t\t\t\twhile ((i & ((1 << w) - 1)) !== x[h]) {\r\n\t\t\t\t\tw -= lx[h]; // don't need to update q\r\n\t\t\t\t\th--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* return actual size of base table */\r\n\t\tthis.m = lx[1];\r\n\r\n\t\t/* Return true (1) if we were given an incomplete table */\r\n\t\tthis.status = ((y !== 0 && g !== 1) ? 1 : 0);\r\n\t}\r\n\r\n\r\n\t/* routines (inflate) */\r\n\r\n\tfunction GET_BYTE() {\r\n\t\tif (inflate_data.length === inflate_pos) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn inflate_data[inflate_pos++] & 0xff;\r\n\t}\r\n\r\n\tfunction NEEDBITS(n) {\r\n\t\twhile (bit_len < n) {\r\n\t\t\tbit_buf |= GET_BYTE() << bit_len;\r\n\t\t\tbit_len += 8;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction GETBITS(n) {\r\n\t\treturn bit_buf & MASK_BITS[n];\r\n\t}\r\n\r\n\tfunction DUMPBITS(n) {\r\n\t\tbit_buf >>= n;\r\n\t\tbit_len -= n;\r\n\t}\r\n\r\n\tfunction inflate_codes(buff, off, size) {\r\n\t\t// inflate (decompress) the codes in a deflated (compressed) block.\r\n\t\t// Return an error code or zero if it all goes ok.\r\n\t\tvar e; // table entry flag/number of extra bits\r\n\t\tvar t; // (HuftNode) pointer to table entry\r\n\t\tvar n;\r\n\r\n\t\tif (size === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// inflate the coded data\r\n\t\tn = 0;\r\n\t\tfor (;;) { // do until end of block\r\n\t\t\tNEEDBITS(bl);\r\n\t\t\tt = tl.list[GETBITS(bl)];\r\n\t\t\te = t.e;\r\n\t\t\twhile (e > 16) {\r\n\t\t\t\tif (e === 99) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tDUMPBITS(t.b);\r\n\t\t\t\te -= 16;\r\n\t\t\t\tNEEDBITS(e);\r\n\t\t\t\tt = t.t[GETBITS(e)];\r\n\t\t\t\te = t.e;\r\n\t\t\t}\r\n\t\t\tDUMPBITS(t.b);\r\n\r\n\t\t\tif (e === 16) { // then it's a literal\r\n\t\t\t\twp &= WSIZE - 1;\r\n\t\t\t\tbuff[off + n++] = slide[wp++] = t.n;\r\n\t\t\t\tif (n === size) {\r\n\t\t\t\t\treturn size;\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// exit if end of block\r\n\t\t\tif (e === 15) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// it's an EOB or a length\r\n\r\n\t\t\t// get length of block to copy\r\n\t\t\tNEEDBITS(e);\r\n\t\t\tcopy_leng = t.n + GETBITS(e);\r\n\t\t\tDUMPBITS(e);\r\n\r\n\t\t\t// decode distance of block to copy\r\n\t\t\tNEEDBITS(bd);\r\n\t\t\tt = td.list[GETBITS(bd)];\r\n\t\t\te = t.e;\r\n\r\n\t\t\twhile (e > 16) {\r\n\t\t\t\tif (e === 99) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tDUMPBITS(t.b);\r\n\t\t\t\te -= 16;\r\n\t\t\t\tNEEDBITS(e);\r\n\t\t\t\tt = t.t[GETBITS(e)];\r\n\t\t\t\te = t.e;\r\n\t\t\t}\r\n\t\t\tDUMPBITS(t.b);\r\n\t\t\tNEEDBITS(e);\r\n\t\t\tcopy_dist = wp - t.n - GETBITS(e);\r\n\t\t\tDUMPBITS(e);\r\n\r\n\t\t\t// do the copy\r\n\t\t\twhile (copy_leng > 0 && n < size) {\r\n\t\t\t\tcopy_leng--;\r\n\t\t\t\tcopy_dist &= WSIZE - 1;\r\n\t\t\t\twp &= WSIZE - 1;\r\n\t\t\t\tbuff[off + n++] = slide[wp++] = slide[copy_dist++];\r\n\t\t\t}\r\n\r\n\t\t\tif (n === size) {\r\n\t\t\t\treturn size;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmethod = -1; // done\r\n\t\treturn n;\r\n\t}\r\n\r\n\tfunction inflate_stored(buff, off, size) {\r\n\t\t/* \"decompress\" an inflated type 0 (stored) block. */\r\n\t\tvar n;\r\n\r\n\t\t// go to byte boundary\r\n\t\tn = bit_len & 7;\r\n\t\tDUMPBITS(n);\r\n\r\n\t\t// get the length and its complement\r\n\t\tNEEDBITS(16);\r\n\t\tn = GETBITS(16);\r\n\t\tDUMPBITS(16);\r\n\t\tNEEDBITS(16);\r\n\t\tif (n !== ((~bit_buf) & 0xffff)) {\r\n\t\t\treturn -1; // error in compressed data\r\n\t\t}\r\n\t\tDUMPBITS(16);\r\n\r\n\t\t// read and output the compressed data\r\n\t\tcopy_leng = n;\r\n\r\n\t\tn = 0;\r\n\t\twhile (copy_leng > 0 && n < size) {\r\n\t\t\tcopy_leng--;\r\n\t\t\twp &= WSIZE - 1;\r\n\t\t\tNEEDBITS(8);\r\n\t\t\tbuff[off + n++] = slide[wp++] = GETBITS(8);\r\n\t\t\tDUMPBITS(8);\r\n\t\t}\r\n\r\n\t\tif (copy_leng === 0) {\r\n\t\t\tmethod = -1; // done\r\n\t\t}\r\n\t\treturn n;\r\n\t}\r\n\r\n\tfunction inflate_fixed(buff, off, size) {\r\n\t\t// decompress an inflated type 1 (fixed Huffman codes) block.  We should\r\n\t\t// either replace this with a custom decoder, or at least precompute the\r\n\t\t// Huffman tables.\r\n\r\n\t\t// if first time, set up tables for fixed blocks\r\n\t\tif (!fixed_tl) {\r\n\t\t\tvar i; // temporary variable\r\n\t\t\tvar l = []; // 288 length list for huft_build (initialized below)\r\n\t\t\tvar h; // HuftBuild\r\n\r\n\t\t\t// literal table\r\n\t\t\tfor (i = 0; i < 144; i++) {\r\n\t\t\t\tl[i] = 8;\r\n\t\t\t}\r\n\t\t\tfor (null; i < 256; i++) {\r\n\t\t\t\tl[i] = 9;\r\n\t\t\t}\r\n\t\t\tfor (null; i < 280; i++) {\r\n\t\t\t\tl[i] = 7;\r\n\t\t\t}\r\n\t\t\tfor (null; i < 288; i++) { // make a complete, but wrong code set\r\n\t\t\t\tl[i] = 8;\r\n\t\t\t}\r\n\t\t\tfixed_bl = 7;\r\n\r\n\t\t\th = new HuftBuild(l, 288, 257, cplens, cplext, fixed_bl);\r\n\t\t\tif (h.status !== 0) {\r\n\t\t\t\tconsole.error(\"HufBuild error: \" + h.status);\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tfixed_tl = h.root;\r\n\t\t\tfixed_bl = h.m;\r\n\r\n\t\t\t// distance table\r\n\t\t\tfor (i = 0; i < 30; i++) { // make an incomplete code set\r\n\t\t\t\tl[i] = 5;\r\n\t\t\t}\r\n\t\t\tfixed_bd = 5;\r\n\r\n\t\t\th = new HuftBuild(l, 30, 0, cpdist, cpdext, fixed_bd);\r\n\t\t\tif (h.status > 1) {\r\n\t\t\t\tfixed_tl = null;\r\n\t\t\t\tconsole.error(\"HufBuild error: \" + h.status);\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tfixed_td = h.root;\r\n\t\t\tfixed_bd = h.m;\r\n\t\t}\r\n\r\n\t\ttl = fixed_tl;\r\n\t\ttd = fixed_td;\r\n\t\tbl = fixed_bl;\r\n\t\tbd = fixed_bd;\r\n\t\treturn inflate_codes(buff, off, size);\r\n\t}\r\n\r\n\tfunction inflate_dynamic(buff, off, size) {\r\n\t\t// decompress an inflated type 2 (dynamic Huffman codes) block.\r\n\t\tvar i; // temporary variables\r\n\t\tvar j;\r\n\t\tvar l; // last length\r\n\t\tvar n; // number of lengths to get\r\n\t\tvar t; // (HuftNode) literal/length code table\r\n\t\tvar nb; // number of bit length codes\r\n\t\tvar nl; // number of literal/length codes\r\n\t\tvar nd; // number of distance codes\r\n\t\tvar ll = [];\r\n\t\tvar h; // (HuftBuild)\r\n\r\n\t\t// literal/length and distance code lengths\r\n\t\tfor (i = 0; i < 286 + 30; i++) {\r\n\t\t\tll[i] = 0;\r\n\t\t}\r\n\r\n\t\t// read in table lengths\r\n\t\tNEEDBITS(5);\r\n\t\tnl = 257 + GETBITS(5); // number of literal/length codes\r\n\t\tDUMPBITS(5);\r\n\t\tNEEDBITS(5);\r\n\t\tnd = 1 + GETBITS(5); // number of distance codes\r\n\t\tDUMPBITS(5);\r\n\t\tNEEDBITS(4);\r\n\t\tnb = 4 + GETBITS(4); // number of bit length codes\r\n\t\tDUMPBITS(4);\r\n\t\tif (nl > 286 || nd > 30) {\r\n\t\t\treturn -1; // bad lengths\r\n\t\t}\r\n\r\n\t\t// read in bit-length-code lengths\r\n\t\tfor (j = 0; j < nb; j++) {\r\n\t\t\tNEEDBITS(3);\r\n\t\t\tll[border[j]] = GETBITS(3);\r\n\t\t\tDUMPBITS(3);\r\n\t\t}\r\n\t\tfor (null; j < 19; j++) {\r\n\t\t\tll[border[j]] = 0;\r\n\t\t}\r\n\r\n\t\t// build decoding table for trees--single level, 7 bit lookup\r\n\t\tbl = 7;\r\n\t\th = new HuftBuild(ll, 19, 19, null, null, bl);\r\n\t\tif (h.status !== 0) {\r\n\t\t\treturn -1; // incomplete code set\r\n\t\t}\r\n\r\n\t\ttl = h.root;\r\n\t\tbl = h.m;\r\n\r\n\t\t// read in literal and distance code lengths\r\n\t\tn = nl + nd;\r\n\t\ti = l = 0;\r\n\t\twhile (i < n) {\r\n\t\t\tNEEDBITS(bl);\r\n\t\t\tt = tl.list[GETBITS(bl)];\r\n\t\t\tj = t.b;\r\n\t\t\tDUMPBITS(j);\r\n\t\t\tj = t.n;\r\n\t\t\tif (j < 16) { // length of code in bits (0..15)\r\n\t\t\t\tll[i++] = l = j; // save last length in l\r\n\t\t\t} else if (j === 16) { // repeat last length 3 to 6 times\r\n\t\t\t\tNEEDBITS(2);\r\n\t\t\t\tj = 3 + GETBITS(2);\r\n\t\t\t\tDUMPBITS(2);\r\n\t\t\t\tif (i + j > n) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\twhile (j-- > 0) {\r\n\t\t\t\t\tll[i++] = l;\r\n\t\t\t\t}\r\n\t\t\t} else if (j === 17) { // 3 to 10 zero length codes\r\n\t\t\t\tNEEDBITS(3);\r\n\t\t\t\tj = 3 + GETBITS(3);\r\n\t\t\t\tDUMPBITS(3);\r\n\t\t\t\tif (i + j > n) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\twhile (j-- > 0) {\r\n\t\t\t\t\tll[i++] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tl = 0;\r\n\t\t\t} else { // j === 18: 11 to 138 zero length codes\r\n\t\t\t\tNEEDBITS(7);\r\n\t\t\t\tj = 11 + GETBITS(7);\r\n\t\t\t\tDUMPBITS(7);\r\n\t\t\t\tif (i + j > n) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\twhile (j-- > 0) {\r\n\t\t\t\t\tll[i++] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tl = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// build the decoding tables for literal/length and distance codes\r\n\t\tbl = lbits;\r\n\t\th = new HuftBuild(ll, nl, 257, cplens, cplext, bl);\r\n\t\tif (bl === 0) { // no literals or lengths\r\n\t\t\th.status = 1;\r\n\t\t}\r\n\t\tif (h.status !== 0) {\r\n\t\t\tif (h.status !== 1) {\r\n\t\t\t\treturn -1; // incomplete code set\r\n\t\t\t}\r\n\t\t\t// **incomplete literal tree**\r\n\t\t}\r\n\t\ttl = h.root;\r\n\t\tbl = h.m;\r\n\r\n\t\tfor (i = 0; i < nd; i++) {\r\n\t\t\tll[i] = ll[i + nl];\r\n\t\t}\r\n\t\tbd = dbits;\r\n\t\th = new HuftBuild(ll, nd, 0, cpdist, cpdext, bd);\r\n\t\ttd = h.root;\r\n\t\tbd = h.m;\r\n\r\n\t\tif (bd === 0 && nl > 257) { // lengths but no distances\r\n\t\t\t// **incomplete distance tree**\r\n\t\t\treturn -1;\r\n\t\t}\r\n/*\r\n\t\tif (h.status === 1) {\r\n\t\t\t// **incomplete distance tree**\r\n\t\t}\r\n*/\r\n\t\tif (h.status !== 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// decompress until an end-of-block code\r\n\t\treturn inflate_codes(buff, off, size);\r\n\t}\r\n\r\n\tfunction inflate_start() {\r\n\t\tif (!slide) {\r\n\t\t\tslide = []; // new Array(2 * WSIZE); // slide.length is never called\r\n\t\t}\r\n\t\twp = 0;\r\n\t\tbit_buf = 0;\r\n\t\tbit_len = 0;\r\n\t\tmethod = -1;\r\n\t\teof = false;\r\n\t\tcopy_leng = copy_dist = 0;\r\n\t\ttl = null;\r\n\t}\r\n\r\n\tfunction inflate_internal(buff, off, size) {\r\n\t\t// decompress an inflated entry\r\n\t\tvar n, i;\r\n\r\n\t\tn = 0;\r\n\t\twhile (n < size) {\r\n\t\t\tif (eof && method === -1) {\r\n\t\t\t\treturn n;\r\n\t\t\t}\r\n\r\n\t\t\tif (copy_leng > 0) {\r\n\t\t\t\tif (method !== STORED_BLOCK) {\r\n\t\t\t\t\t// STATIC_TREES or DYN_TREES\r\n\t\t\t\t\twhile (copy_leng > 0 && n < size) {\r\n\t\t\t\t\t\tcopy_leng--;\r\n\t\t\t\t\t\tcopy_dist &= WSIZE - 1;\r\n\t\t\t\t\t\twp &= WSIZE - 1;\r\n\t\t\t\t\t\tbuff[off + n++] = slide[wp++] = slide[copy_dist++];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (copy_leng > 0 && n < size) {\r\n\t\t\t\t\t\tcopy_leng--;\r\n\t\t\t\t\t\twp &= WSIZE - 1;\r\n\t\t\t\t\t\tNEEDBITS(8);\r\n\t\t\t\t\t\tbuff[off + n++] = slide[wp++] = GETBITS(8);\r\n\t\t\t\t\t\tDUMPBITS(8);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (copy_leng === 0) {\r\n\t\t\t\t\t\tmethod = -1; // done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (n === size) {\r\n\t\t\t\t\treturn n;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (method === -1) {\r\n\t\t\t\tif (eof) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// read in last block bit\r\n\t\t\t\tNEEDBITS(1);\r\n\t\t\t\tif (GETBITS(1) !== 0) {\r\n\t\t\t\t\teof = true;\r\n\t\t\t\t}\r\n\t\t\t\tDUMPBITS(1);\r\n\r\n\t\t\t\t// read in block type\r\n\t\t\t\tNEEDBITS(2);\r\n\t\t\t\tmethod = GETBITS(2);\r\n\t\t\t\tDUMPBITS(2);\r\n\t\t\t\ttl = null;\r\n\t\t\t\tcopy_leng = 0;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (method) {\r\n\t\t\tcase STORED_BLOCK:\r\n\t\t\t\ti = inflate_stored(buff, off + n, size - n);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase STATIC_TREES:\r\n\t\t\t\tif (tl) {\r\n\t\t\t\t\ti = inflate_codes(buff, off + n, size - n);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ti = inflate_fixed(buff, off + n, size - n);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase DYN_TREES:\r\n\t\t\t\tif (tl) {\r\n\t\t\t\t\ti = inflate_codes(buff, off + n, size - n);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ti = inflate_dynamic(buff, off + n, size - n);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault: // error\r\n\t\t\t\ti = -1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (i === -1) {\r\n\t\t\t\tif (eof) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tn += i;\r\n\t\t}\r\n\t\treturn n;\r\n\t}\r\n\r\n\tfunction inflate(arr) {\r\n\t\tvar buff = [], i;\r\n\r\n\t\tinflate_start();\r\n\t\tinflate_data = arr;\r\n\t\tinflate_pos = 0;\r\n\r\n\t\tdo {\r\n\t\t\ti = inflate_internal(buff, buff.length, 1024);\r\n\t\t} while (i > 0);\r\n\t\tinflate_data = null; // G.C.\r\n\t\treturn buff;\r\n\t}\r\n\r\n\tmodule.exports = inflate;\r\n}());\r\n","/*\r\n * $Id: rawdeflate.js,v 0.3 2009/03/01 19:05:05 dankogai Exp dankogai $\r\n *\r\n * Original:\r\n *   http://www.onicos.com/staff/iz/amuse/javascript/expert/deflate.txt\r\n */\r\n\r\n/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\r\n * Version: 1.0.1\r\n * LastModified: Dec 25 1999\r\n */\r\n\r\n/* Interface:\r\n * data = deflate(src);\r\n */\r\n\r\n(function () {\r\n\t/* constant parameters */\r\n\tvar WSIZE = 32768, // Sliding Window size\r\n\t\tSTORED_BLOCK = 0,\r\n\t\tSTATIC_TREES = 1,\r\n\t\tDYN_TREES = 2,\r\n\r\n\t/* for deflate */\r\n\t\tDEFAULT_LEVEL = 6,\r\n\t\tFULL_SEARCH = false,\r\n\t\tINBUFSIZ = 32768, // Input buffer size\r\n\t\t//INBUF_EXTRA = 64, // Extra buffer\r\n\t\tOUTBUFSIZ = 1024 * 8,\r\n\t\twindow_size = 2 * WSIZE,\r\n\t\tMIN_MATCH = 3,\r\n\t\tMAX_MATCH = 258,\r\n\t\tBITS = 16,\r\n\t// for SMALL_MEM\r\n\t\tLIT_BUFSIZE = 0x2000,\r\n//\t\tHASH_BITS = 13,\r\n\t//for MEDIUM_MEM\r\n\t//\tLIT_BUFSIZE = 0x4000,\r\n\t//\tHASH_BITS = 14,\r\n\t// for BIG_MEM\r\n\t//\tLIT_BUFSIZE = 0x8000,\r\n\t\tHASH_BITS = 15,\r\n\t\tDIST_BUFSIZE = LIT_BUFSIZE,\r\n\t\tHASH_SIZE = 1 << HASH_BITS,\r\n\t\tHASH_MASK = HASH_SIZE - 1,\r\n\t\tWMASK = WSIZE - 1,\r\n\t\tNIL = 0, // Tail of hash chains\r\n\t\tTOO_FAR = 4096,\r\n\t\tMIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1,\r\n\t\tMAX_DIST = WSIZE - MIN_LOOKAHEAD,\r\n\t\tSMALLEST = 1,\r\n\t\tMAX_BITS = 15,\r\n\t\tMAX_BL_BITS = 7,\r\n\t\tLENGTH_CODES = 29,\r\n\t\tLITERALS = 256,\r\n\t\tEND_BLOCK = 256,\r\n\t\tL_CODES = LITERALS + 1 + LENGTH_CODES,\r\n\t\tD_CODES = 30,\r\n\t\tBL_CODES = 19,\r\n\t\tREP_3_6 = 16,\r\n\t\tREPZ_3_10 = 17,\r\n\t\tREPZ_11_138 = 18,\r\n\t\tHEAP_SIZE = 2 * L_CODES + 1,\r\n\t\tH_SHIFT = parseInt((HASH_BITS + MIN_MATCH - 1) / MIN_MATCH, 10),\r\n\r\n\t/* variables */\r\n\t\tfree_queue,\r\n\t\tqhead,\r\n\t\tqtail,\r\n\t\tinitflag,\r\n\t\toutbuf = null,\r\n\t\toutcnt,\r\n\t\toutoff,\r\n\t\tcomplete,\r\n\t\twindow,\r\n\t\td_buf,\r\n\t\tl_buf,\r\n\t\tprev,\r\n\t\tbi_buf,\r\n\t\tbi_valid,\r\n\t\tblock_start,\r\n\t\tins_h,\r\n\t\thash_head,\r\n\t\tprev_match,\r\n\t\tmatch_available,\r\n\t\tmatch_length,\r\n\t\tprev_length,\r\n\t\tstrstart,\r\n\t\tmatch_start,\r\n\t\teofile,\r\n\t\tlookahead,\r\n\t\tmax_chain_length,\r\n\t\tmax_lazy_match,\r\n\t\tcompr_level,\r\n\t\tgood_match,\r\n\t\tnice_match,\r\n\t\tdyn_ltree,\r\n\t\tdyn_dtree,\r\n\t\tstatic_ltree,\r\n\t\tstatic_dtree,\r\n\t\tbl_tree,\r\n\t\tl_desc,\r\n\t\td_desc,\r\n\t\tbl_desc,\r\n\t\tbl_count,\r\n\t\theap,\r\n\t\theap_len,\r\n\t\theap_max,\r\n\t\tdepth,\r\n\t\tlength_code,\r\n\t\tdist_code,\r\n\t\tbase_length,\r\n\t\tbase_dist,\r\n\t\tflag_buf,\r\n\t\tlast_lit,\r\n\t\tlast_dist,\r\n\t\tlast_flags,\r\n\t\tflags,\r\n\t\tflag_bit,\r\n\t\topt_len,\r\n\t\tstatic_len,\r\n\t\tdeflate_data,\r\n\t\tdeflate_pos;\r\n\r\n\tif (LIT_BUFSIZE > INBUFSIZ) {\r\n\t\tconsole.error(\"error: INBUFSIZ is too small\");\r\n\t}\r\n\tif ((WSIZE << 1) > (1 << BITS)) {\r\n\t\tconsole.error(\"error: WSIZE is too large\");\r\n\t}\r\n\tif (HASH_BITS > BITS - 1) {\r\n\t\tconsole.error(\"error: HASH_BITS is too large\");\r\n\t}\r\n\tif (HASH_BITS < 8 || MAX_MATCH !== 258) {\r\n\t\tconsole.error(\"error: Code too clever\");\r\n\t}\r\n\r\n\t/* objects (deflate) */\r\n\r\n\tfunction DeflateCT() {\r\n\t\tthis.fc = 0; // frequency count or bit string\r\n\t\tthis.dl = 0; // father node in Huffman tree or length of bit string\r\n\t}\r\n\r\n\tfunction DeflateTreeDesc() {\r\n\t\tthis.dyn_tree = null; // the dynamic tree\r\n\t\tthis.static_tree = null; // corresponding static tree or NULL\r\n\t\tthis.extra_bits = null; // extra bits for each code or NULL\r\n\t\tthis.extra_base = 0; // base index for extra_bits\r\n\t\tthis.elems = 0; // max number of elements in the tree\r\n\t\tthis.max_length = 0; // max bit length for the codes\r\n\t\tthis.max_code = 0; // largest code with non zero frequency\r\n\t}\r\n\r\n\t/* Values for max_lazy_match, good_match and max_chain_length, depending on\r\n\t * the desired pack level (0..9). The values given below have been tuned to\r\n\t * exclude worst case performance for pathological files. Better values may be\r\n\t * found for specific files.\r\n\t */\r\n\tfunction DeflateConfiguration(a, b, c, d) {\r\n\t\tthis.good_length = a; // reduce lazy search above this match length\r\n\t\tthis.max_lazy = b; // do not perform lazy search above this match length\r\n\t\tthis.nice_length = c; // quit search above this match length\r\n\t\tthis.max_chain = d;\r\n\t}\r\n\r\n\tfunction DeflateBuffer() {\r\n\t\tthis.next = null;\r\n\t\tthis.len = 0;\r\n\t\tthis.ptr = []; // new Array(OUTBUFSIZ); // ptr.length is never read\r\n\t\tthis.off = 0;\r\n\t}\r\n\r\n\t/* constant tables */\r\n\tvar extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\r\n\tvar extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\r\n\tvar extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\r\n\tvar bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\r\n\tvar configuration_table = [\r\n\t\tnew DeflateConfiguration(0, 0, 0, 0),\r\n\t\tnew DeflateConfiguration(4, 4, 8, 4),\r\n\t\tnew DeflateConfiguration(4, 5, 16, 8),\r\n\t\tnew DeflateConfiguration(4, 6, 32, 32),\r\n\t\tnew DeflateConfiguration(4, 4, 16, 16),\r\n\t\tnew DeflateConfiguration(8, 16, 32, 32),\r\n\t\tnew DeflateConfiguration(8, 16, 128, 128),\r\n\t\tnew DeflateConfiguration(8, 32, 128, 256),\r\n\t\tnew DeflateConfiguration(32, 128, 258, 1024),\r\n\t\tnew DeflateConfiguration(32, 258, 258, 4096)\r\n\t];\r\n\r\n\r\n\t/* routines (deflate) */\r\n\r\n\tfunction deflate_start(level) {\r\n\t\tvar i;\r\n\r\n\t\tif (!level) {\r\n\t\t\tlevel = DEFAULT_LEVEL;\r\n\t\t} else if (level < 1) {\r\n\t\t\tlevel = 1;\r\n\t\t} else if (level > 9) {\r\n\t\t\tlevel = 9;\r\n\t\t}\r\n\r\n\t\tcompr_level = level;\r\n\t\tinitflag = false;\r\n\t\teofile = false;\r\n\t\tif (outbuf !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfree_queue = qhead = qtail = null;\r\n\t\toutbuf = []; // new Array(OUTBUFSIZ); // outbuf.length never called\r\n\t\twindow = []; // new Array(window_size); // window.length never called\r\n\t\td_buf = []; // new Array(DIST_BUFSIZE); // d_buf.length never called\r\n\t\tl_buf = []; // new Array(INBUFSIZ + INBUF_EXTRA); // l_buf.length never called\r\n\t\tprev = []; // new Array(1 << BITS); // prev.length never called\r\n\r\n\t\tdyn_ltree = [];\r\n\t\tfor (i = 0; i < HEAP_SIZE; i++) {\r\n\t\t\tdyn_ltree[i] = new DeflateCT();\r\n\t\t}\r\n\t\tdyn_dtree = [];\r\n\t\tfor (i = 0; i < 2 * D_CODES + 1; i++) {\r\n\t\t\tdyn_dtree[i] = new DeflateCT();\r\n\t\t}\r\n\t\tstatic_ltree = [];\r\n\t\tfor (i = 0; i < L_CODES + 2; i++) {\r\n\t\t\tstatic_ltree[i] = new DeflateCT();\r\n\t\t}\r\n\t\tstatic_dtree = [];\r\n\t\tfor (i = 0; i < D_CODES; i++) {\r\n\t\t\tstatic_dtree[i] = new DeflateCT();\r\n\t\t}\r\n\t\tbl_tree = [];\r\n\t\tfor (i = 0; i < 2 * BL_CODES + 1; i++) {\r\n\t\t\tbl_tree[i] = new DeflateCT();\r\n\t\t}\r\n\t\tl_desc = new DeflateTreeDesc();\r\n\t\td_desc = new DeflateTreeDesc();\r\n\t\tbl_desc = new DeflateTreeDesc();\r\n\t\tbl_count = []; // new Array(MAX_BITS+1); // bl_count.length never called\r\n\t\theap = []; // new Array(2*L_CODES+1); // heap.length never called\r\n\t\tdepth = []; // new Array(2*L_CODES+1); // depth.length never called\r\n\t\tlength_code = []; // new Array(MAX_MATCH-MIN_MATCH+1); // length_code.length never called\r\n\t\tdist_code = []; // new Array(512); // dist_code.length never called\r\n\t\tbase_length = []; // new Array(LENGTH_CODES); // base_length.length never called\r\n\t\tbase_dist = []; // new Array(D_CODES); // base_dist.length never called\r\n\t\tflag_buf = []; // new Array(parseInt(LIT_BUFSIZE / 8, 10)); // flag_buf.length never called\r\n\t}\r\n\r\n\tfunction deflate_end() {\r\n\t\tfree_queue = qhead = qtail = null;\r\n\t\toutbuf = null;\r\n\t\twindow = null;\r\n\t\td_buf = null;\r\n\t\tl_buf = null;\r\n\t\tprev = null;\r\n\t\tdyn_ltree = null;\r\n\t\tdyn_dtree = null;\r\n\t\tstatic_ltree = null;\r\n\t\tstatic_dtree = null;\r\n\t\tbl_tree = null;\r\n\t\tl_desc = null;\r\n\t\td_desc = null;\r\n\t\tbl_desc = null;\r\n\t\tbl_count = null;\r\n\t\theap = null;\r\n\t\tdepth = null;\r\n\t\tlength_code = null;\r\n\t\tdist_code = null;\r\n\t\tbase_length = null;\r\n\t\tbase_dist = null;\r\n\t\tflag_buf = null;\r\n\t}\r\n\r\n\tfunction reuse_queue(p) {\r\n\t\tp.next = free_queue;\r\n\t\tfree_queue = p;\r\n\t}\r\n\r\n\tfunction new_queue() {\r\n\t\tvar p;\r\n\r\n\t\tif (free_queue !== null) {\r\n\t\t\tp = free_queue;\r\n\t\t\tfree_queue = free_queue.next;\r\n\t\t} else {\r\n\t\t\tp = new DeflateBuffer();\r\n\t\t}\r\n\t\tp.next = null;\r\n\t\tp.len = p.off = 0;\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\tfunction head1(i) {\r\n\t\treturn prev[WSIZE + i];\r\n\t}\r\n\r\n\tfunction head2(i, val) {\r\n\t\treturn (prev[WSIZE + i] = val);\r\n\t}\r\n\r\n\t/* put_byte is used for the compressed output, put_ubyte for the\r\n\t * uncompressed output. However unlzw() uses window for its\r\n\t * suffix table instead of its output buffer, so it does not use put_ubyte\r\n\t * (to be cleaned up).\r\n\t */\r\n\tfunction put_byte(c) {\r\n\t\toutbuf[outoff + outcnt++] = c;\r\n\t\tif (outoff + outcnt === OUTBUFSIZ) {\r\n\t\t\tqoutbuf();\r\n\t\t}\r\n\t}\r\n\r\n\t/* Output a 16 bit value, lsb first */\r\n\tfunction put_short(w) {\r\n\t\tw &= 0xffff;\r\n\t\tif (outoff + outcnt < OUTBUFSIZ - 2) {\r\n\t\t\toutbuf[outoff + outcnt++] = (w & 0xff);\r\n\t\t\toutbuf[outoff + outcnt++] = (w >>> 8);\r\n\t\t} else {\r\n\t\t\tput_byte(w & 0xff);\r\n\t\t\tput_byte(w >>> 8);\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Insert string s in the dictionary and set match_head to the previous head\r\n\t * of the hash chain (the most recent string with same hash key). Return\r\n\t * the previous length of the hash chain.\r\n\t * IN  assertion: all calls to to INSERT_STRING are made with consecutive\r\n\t *    input characters and the first MIN_MATCH bytes of s are valid\r\n\t *    (except for the last MIN_MATCH-1 bytes of the input file).\r\n\t */\r\n\tfunction INSERT_STRING() {\r\n\t\tins_h = ((ins_h << H_SHIFT) ^ (window[strstart + MIN_MATCH - 1] & 0xff)) & HASH_MASK;\r\n\t\thash_head = head1(ins_h);\r\n\t\tprev[strstart & WMASK] = hash_head;\r\n\t\thead2(ins_h, strstart);\r\n\t}\r\n\r\n\t/* Send a code of the given tree. c and tree must not have side effects */\r\n\tfunction SEND_CODE(c, tree) {\r\n\t\tsend_bits(tree[c].fc, tree[c].dl);\r\n\t}\r\n\r\n\t/* Mapping from a distance to a distance code. dist is the distance - 1 and\r\n\t * must not have side effects. dist_code[256] and dist_code[257] are never\r\n\t * used.\r\n\t */\r\n\tfunction D_CODE(dist) {\r\n\t\treturn (dist < 256 ? dist_code[dist] : dist_code[256 + (dist >> 7)]) & 0xff;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Compares to subtrees, using the tree depth as tie breaker when\r\n\t * the subtrees have equal frequency. This minimizes the worst case length.\r\n\t */\r\n\tfunction SMALLER(tree, n, m) {\r\n\t\treturn tree[n].fc < tree[m].fc || (tree[n].fc === tree[m].fc && depth[n] <= depth[m]);\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * read string data\r\n\t */\r\n\tfunction read_buff(buff, offset, n) {\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < n && deflate_pos < deflate_data.length; i++) {\r\n\t\t\tbuff[offset + i] = deflate_data[deflate_pos++] & 0xff;\r\n\t\t}\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Initialize the \"longest match\" routines for a new file\r\n\t */\r\n\tfunction lm_init() {\r\n\t\tvar j;\r\n\r\n\t\t// Initialize the hash table. */\r\n\t\tfor (j = 0; j < HASH_SIZE; j++) {\r\n\t\t\t// head2(j, NIL);\r\n\t\t\tprev[WSIZE + j] = 0;\r\n\t\t}\r\n\t\t// prev will be initialized on the fly */\r\n\r\n\t\t// Set the default configuration parameters:\r\n\t\tmax_lazy_match = configuration_table[compr_level].max_lazy;\r\n\t\tgood_match = configuration_table[compr_level].good_length;\r\n\t\tif (!FULL_SEARCH) {\r\n\t\t\tnice_match = configuration_table[compr_level].nice_length;\r\n\t\t}\r\n\t\tmax_chain_length = configuration_table[compr_level].max_chain;\r\n\r\n\t\tstrstart = 0;\r\n\t\tblock_start = 0;\r\n\r\n\t\tlookahead = read_buff(window, 0, 2 * WSIZE);\r\n\t\tif (lookahead <= 0) {\r\n\t\t\teofile = true;\r\n\t\t\tlookahead = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\teofile = false;\r\n\t\t// Make sure that we always have enough lookahead. This is important\r\n\t\t// if input comes from a device such as a tty.\r\n\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\r\n\t\t\tfill_window();\r\n\t\t}\r\n\r\n\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but this is\r\n\t\t// not important since only literal bytes will be emitted.\r\n\t\tins_h = 0;\r\n\t\tfor (j = 0; j < MIN_MATCH - 1; j++) {\r\n\t\t\t// UPDATE_HASH(ins_h, window[j]);\r\n\t\t\tins_h = ((ins_h << H_SHIFT) ^ (window[j] & 0xff)) & HASH_MASK;\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Set match_start to the longest match starting at the given string and\r\n\t * return its length. Matches shorter or equal to prev_length are discarded,\r\n\t * in which case the result is equal to prev_length and match_start is\r\n\t * garbage.\r\n\t * IN assertions: cur_match is the head of the hash chain for the current\r\n\t *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\r\n\t */\r\n\tfunction longest_match(cur_match) {\r\n\t\tvar chain_length = max_chain_length; // max hash chain length\r\n\t\tvar scanp = strstart; // current string\r\n\t\tvar matchp; // matched string\r\n\t\tvar len; // length of current match\r\n\t\tvar best_len = prev_length; // best match length so far\r\n\r\n\t\t// Stop when cur_match becomes <= limit. To simplify the code,\r\n\t\t// we prevent matches with the string of window index 0.\r\n\t\tvar limit = (strstart > MAX_DIST ? strstart - MAX_DIST : NIL);\r\n\r\n\t\tvar strendp = strstart + MAX_MATCH;\r\n\t\tvar scan_end1 = window[scanp + best_len - 1];\r\n\t\tvar scan_end = window[scanp + best_len];\r\n\r\n\t\tvar i, broke;\r\n\r\n\t\t// Do not waste too much time if we already have a good match: */\r\n\t\tif (prev_length >= good_match) {\r\n\t\t\tchain_length >>= 2;\r\n\t\t}\r\n\r\n\t\t// Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, \"insufficient lookahead\");\r\n\r\n\t\tdo {\r\n\t\t\t// Assert(cur_match < encoder->strstart, \"no future\");\r\n\t\t\tmatchp = cur_match;\r\n\r\n\t\t\t// Skip to next match if the match length cannot increase\r\n\t\t\t// or if the match length is less than 2:\r\n\t\t\tif (window[matchp + best_len] !== scan_end  ||\r\n\t\t\t\t\twindow[matchp + best_len - 1] !== scan_end1 ||\r\n\t\t\t\t\twindow[matchp] !== window[scanp] ||\r\n\t\t\t\t\twindow[++matchp] !== window[scanp + 1]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// The check at best_len-1 can be removed because it will be made\r\n\t\t\t// again later. (This heuristic is not always a win.)\r\n\t\t\t// It is not necessary to compare scan[2] and match[2] since they\r\n\t\t\t// are always equal when the other bytes match, given that\r\n\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\r\n\t\t\tscanp += 2;\r\n\t\t\tmatchp++;\r\n\r\n\t\t\t// We check for insufficient lookahead only every 8th comparison;\r\n\t\t\t// the 256th check will be made at strstart+258.\r\n\t\t\twhile (scanp < strendp) {\r\n\t\t\t\tbroke = false;\r\n\t\t\t\tfor (i = 0; i < 8; i += 1) {\r\n\t\t\t\t\tscanp += 1;\r\n\t\t\t\t\tmatchp += 1;\r\n\t\t\t\t\tif (window[scanp] !== window[matchp]) {\r\n\t\t\t\t\t\tbroke = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (broke) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlen = MAX_MATCH - (strendp - scanp);\r\n\t\t\tscanp = strendp - MAX_MATCH;\r\n\r\n\t\t\tif (len > best_len) {\r\n\t\t\t\tmatch_start = cur_match;\r\n\t\t\t\tbest_len = len;\r\n\t\t\t\tif (FULL_SEARCH) {\r\n\t\t\t\t\tif (len >= MAX_MATCH) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (len >= nice_match) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscan_end1 = window[scanp + best_len - 1];\r\n\t\t\t\tscan_end = window[scanp + best_len];\r\n\t\t\t}\r\n\t\t} while ((cur_match = prev[cur_match & WMASK]) > limit && --chain_length !== 0);\r\n\r\n\t\treturn best_len;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Fill the window when the lookahead becomes insufficient.\r\n\t * Updates strstart and lookahead, and sets eofile if end of input file.\r\n\t * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0\r\n\t * OUT assertions: at least one byte has been read, or eofile is set;\r\n\t *    file reads are performed for at least two bytes (required for the\r\n\t *    translate_eol option).\r\n\t */\r\n\tfunction fill_window() {\r\n\t\tvar n, m;\r\n\r\n\t // Amount of free space at the end of the window.\r\n\t\tvar more = window_size - lookahead - strstart;\r\n\r\n\t\t// If the window is almost full and there is insufficient lookahead,\r\n\t\t// move the upper half to the lower one to make room in the upper half.\r\n\t\tif (more === -1) {\r\n\t\t\t// Very unlikely, but possible on 16 bit machine if strstart == 0\r\n\t\t\t// and lookahead == 1 (input done one byte at time)\r\n\t\t\tmore--;\r\n\t\t} else if (strstart >= WSIZE + MAX_DIST) {\r\n\t\t\t// By the IN assertion, the window is not empty so we can't confuse\r\n\t\t\t// more == 0 with more == 64K on a 16 bit machine.\r\n\t\t\t// Assert(window_size == (ulg)2*WSIZE, \"no sliding with BIG_MEM\");\r\n\r\n\t\t\t// System.arraycopy(window, WSIZE, window, 0, WSIZE);\r\n\t\t\tfor (n = 0; n < WSIZE; n++) {\r\n\t\t\t\twindow[n] = window[n + WSIZE];\r\n\t\t\t}\r\n\r\n\t\t\tmatch_start -= WSIZE;\r\n\t\t\tstrstart    -= WSIZE; /* we now have strstart >= MAX_DIST: */\r\n\t\t\tblock_start -= WSIZE;\r\n\r\n\t\t\tfor (n = 0; n < HASH_SIZE; n++) {\r\n\t\t\t\tm = head1(n);\r\n\t\t\t\thead2(n, m >= WSIZE ? m - WSIZE : NIL);\r\n\t\t\t}\r\n\t\t\tfor (n = 0; n < WSIZE; n++) {\r\n\t\t\t// If n is not on any hash chain, prev[n] is garbage but\r\n\t\t\t// its value will never be used.\r\n\t\t\t\tm = prev[n];\r\n\t\t\t\tprev[n] = (m >= WSIZE ? m - WSIZE : NIL);\r\n\t\t\t}\r\n\t\t\tmore += WSIZE;\r\n\t\t}\r\n\t\t// At this point, more >= 2\r\n\t\tif (!eofile) {\r\n\t\t\tn = read_buff(window, strstart + lookahead, more);\r\n\t\t\tif (n <= 0) {\r\n\t\t\t\teofile = true;\r\n\t\t\t} else {\r\n\t\t\t\tlookahead += n;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Processes a new input file and return its compressed length. This\r\n\t * function does not perform lazy evaluationof matches and inserts\r\n\t * new strings in the dictionary only for unmatched strings or for short\r\n\t * matches. It is used only for the fast compression options.\r\n\t */\r\n\tfunction deflate_fast() {\r\n\t\twhile (lookahead !== 0 && qhead === null) {\r\n\t\t\tvar flush; // set if current block must be flushed\r\n\r\n\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\t\t\tINSERT_STRING();\r\n\r\n\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\t// At this point we have always match_length < MIN_MATCH\r\n\t\t\tif (hash_head !== NIL && strstart - hash_head <= MAX_DIST) {\r\n\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t// of the string with itself at the start of the input file).\r\n\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t// longest_match() sets match_start */\r\n\t\t\t\tif (match_length > lookahead) {\r\n\t\t\t\t\tmatch_length = lookahead;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (match_length >= MIN_MATCH) {\r\n\t\t\t\t// check_match(strstart, match_start, match_length);\r\n\r\n\t\t\t\tflush = ct_tally(strstart - match_start, match_length - MIN_MATCH);\r\n\t\t\t\tlookahead -= match_length;\r\n\r\n\t\t\t\t// Insert new strings in the hash table only if the match length\r\n\t\t\t\t// is not too large. This saves time but degrades compression.\r\n\t\t\t\tif (match_length <= max_lazy_match) {\r\n\t\t\t\t\tmatch_length--; // string at strstart already in hash table\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tstrstart++;\r\n\t\t\t\t\t\tINSERT_STRING();\r\n\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n\t\t\t\t\t\t// always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\r\n\t\t\t\t\t\t// these bytes are garbage, but it does not matter since\r\n\t\t\t\t\t\t// the next lookahead bytes will be emitted as literals.\r\n\t\t\t\t\t} while (--match_length !== 0);\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstrstart += match_length;\r\n\t\t\t\t\tmatch_length = 0;\r\n\t\t\t\t\tins_h = window[strstart] & 0xff;\r\n\t\t\t\t\t// UPDATE_HASH(ins_h, window[strstart + 1]);\r\n\t\t\t\t\tins_h = ((ins_h << H_SHIFT) ^ (window[strstart + 1] & 0xff)) & HASH_MASK;\r\n\r\n\t\t\t\t//#if MIN_MATCH !== 3\r\n\t\t\t\t//\t\tCall UPDATE_HASH() MIN_MATCH-3 more times\r\n\t\t\t\t//#endif\r\n\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// No match, output a literal byte */\r\n\t\t\t\tflush = ct_tally(0, window[strstart] & 0xff);\r\n\t\t\t\tlookahead--;\r\n\t\t\t\tstrstart++;\r\n\t\t\t}\r\n\t\t\tif (flush) {\r\n\t\t\t\tflush_block(0);\r\n\t\t\t\tblock_start = strstart;\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t// string following the next match.\r\n\t\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\r\n\t\t\t\tfill_window();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deflate_better() {\r\n\t\t// Process the input block. */\r\n\t\twhile (lookahead !== 0 && qhead === null) {\r\n\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\t\t\tINSERT_STRING();\r\n\r\n\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\tprev_length = match_length;\r\n\t\t\tprev_match = match_start;\r\n\t\t\tmatch_length = MIN_MATCH - 1;\r\n\r\n\t\t\tif (hash_head !== NIL && prev_length < max_lazy_match && strstart - hash_head <= MAX_DIST) {\r\n\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t// of the string with itself at the start of the input file).\r\n\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t// longest_match() sets match_start */\r\n\t\t\t\tif (match_length > lookahead) {\r\n\t\t\t\t\tmatch_length = lookahead;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Ignore a length 3 match if it is too distant: */\r\n\t\t\t\tif (match_length === MIN_MATCH && strstart - match_start > TOO_FAR) {\r\n\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\r\n\t\t\t\t\t// but we will ignore the current match anyway.\r\n\t\t\t\t\tmatch_length--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there was a match at the previous step and the current\r\n\t\t\t// match is not better, output the previous match:\r\n\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\r\n\t\t\t\tvar flush; // set if current block must be flushed\r\n\r\n\t\t\t\t// check_match(strstart - 1, prev_match, prev_length);\r\n\t\t\t\tflush = ct_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\r\n\r\n\t\t\t\t// Insert in hash table all strings up to the end of the match.\r\n\t\t\t\t// strstart-1 and strstart are already inserted.\r\n\t\t\t\tlookahead -= prev_length - 1;\r\n\t\t\t\tprev_length -= 2;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t\tINSERT_STRING();\r\n\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n\t\t\t\t\t// always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\r\n\t\t\t\t\t// these bytes are garbage, but it does not matter since the\r\n\t\t\t\t\t// next lookahead bytes will always be emitted as literals.\r\n\t\t\t\t} while (--prev_length !== 0);\r\n\t\t\t\tmatch_available = false;\r\n\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\t\tstrstart++;\r\n\t\t\t\tif (flush) {\r\n\t\t\t\t\tflush_block(0);\r\n\t\t\t\t\tblock_start = strstart;\r\n\t\t\t\t}\r\n\t\t\t} else if (match_available) {\r\n\t\t\t\t// If there was no match at the previous position, output a\r\n\t\t\t\t// single literal. If there was a match but the current match\r\n\t\t\t\t// is longer, truncate the previous match to a single literal.\r\n\t\t\t\tif (ct_tally(0, window[strstart - 1] & 0xff)) {\r\n\t\t\t\t\tflush_block(0);\r\n\t\t\t\t\tblock_start = strstart;\r\n\t\t\t\t}\r\n\t\t\t\tstrstart++;\r\n\t\t\t\tlookahead--;\r\n\t\t\t} else {\r\n\t\t\t\t// There is no previous match to compare with, wait for\r\n\t\t\t\t// the next step to decide.\r\n\t\t\t\tmatch_available = true;\r\n\t\t\t\tstrstart++;\r\n\t\t\t\tlookahead--;\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t// string following the next match.\r\n\t\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\r\n\t\t\t\tfill_window();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction init_deflate() {\r\n\t\tif (eofile) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbi_buf = 0;\r\n\t\tbi_valid = 0;\r\n\t\tct_init();\r\n\t\tlm_init();\r\n\r\n\t\tqhead = null;\r\n\t\toutcnt = 0;\r\n\t\toutoff = 0;\r\n\r\n\t\tif (compr_level <= 3) {\r\n\t\t\tprev_length = MIN_MATCH - 1;\r\n\t\t\tmatch_length = 0;\r\n\t\t} else {\r\n\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\tmatch_available = false;\r\n\t\t}\r\n\r\n\t\tcomplete = false;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Same as above, but achieves better compression. We use a lazy\r\n\t * evaluation for matches: a match is finally adopted only if there is\r\n\t * no better match at the next window position.\r\n\t */\r\n\tfunction deflate_internal(buff, off, buff_size) {\r\n\t\tvar n;\r\n\r\n\t\tif (!initflag) {\r\n\t\t\tinit_deflate();\r\n\t\t\tinitflag = true;\r\n\t\t\tif (lookahead === 0) { // empty\r\n\t\t\t\tcomplete = true;\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tn = qcopy(buff, off, buff_size);\r\n\t\tif (n === buff_size) {\r\n\t\t\treturn buff_size;\r\n\t\t}\r\n\r\n\t\tif (complete) {\r\n\t\t\treturn n;\r\n\t\t}\r\n\r\n\t\tif (compr_level <= 3) {\r\n\t\t\t// optimized for speed\r\n\t\t\tdeflate_fast();\r\n\t\t} else {\r\n\t\t\tdeflate_better();\r\n\t\t}\r\n\r\n\t\tif (lookahead === 0) {\r\n\t\t\tif (match_available) {\r\n\t\t\t\tct_tally(0, window[strstart - 1] & 0xff);\r\n\t\t\t}\r\n\t\t\tflush_block(1);\r\n\t\t\tcomplete = true;\r\n\t\t}\r\n\r\n\t\treturn n + qcopy(buff, n + off, buff_size - n);\r\n\t}\r\n\r\n\tfunction qcopy(buff, off, buff_size) {\r\n\t\tvar n, i, j;\r\n\r\n\t\tn = 0;\r\n\t\twhile (qhead !== null && n < buff_size) {\r\n\t\t\ti = buff_size - n;\r\n\t\t\tif (i > qhead.len) {\r\n\t\t\t\ti = qhead.len;\r\n\t\t\t}\r\n\t\t\t// System.arraycopy(qhead.ptr, qhead.off, buff, off + n, i);\r\n\t\t\tfor (j = 0; j < i; j++) {\r\n\t\t\t\tbuff[off + n + j] = qhead.ptr[qhead.off + j];\r\n\t\t\t}\r\n\r\n\t\t\tqhead.off += i;\r\n\t\t\tqhead.len -= i;\r\n\t\t\tn += i;\r\n\t\t\tif (qhead.len === 0) {\r\n\t\t\t\tvar p;\r\n\t\t\t\tp = qhead;\r\n\t\t\t\tqhead = qhead.next;\r\n\t\t\t\treuse_queue(p);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (n === buff_size) {\r\n\t\t\treturn n;\r\n\t\t}\r\n\r\n\t\tif (outoff < outcnt) {\r\n\t\t\ti = buff_size - n;\r\n\t\t\tif (i > outcnt - outoff) {\r\n\t\t\t\ti = outcnt - outoff;\r\n\t\t\t}\r\n\t\t\t// System.arraycopy(outbuf, outoff, buff, off + n, i);\r\n\t\t\tfor (j = 0; j < i; j++) {\r\n\t\t\t\tbuff[off + n + j] = outbuf[outoff + j];\r\n\t\t\t}\r\n\t\t\toutoff += i;\r\n\t\t\tn += i;\r\n\t\t\tif (outcnt === outoff) {\r\n\t\t\t\toutcnt = outoff = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn n;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Allocate the match buffer, initialize the various tables and save the\r\n\t * location of the internal file attribute (ascii/binary) and method\r\n\t * (DEFLATE/STORE).\r\n\t */\r\n\tfunction ct_init() {\r\n\t\tvar n; // iterates over tree elements\r\n\t\tvar bits; // bit counter\r\n\t\tvar length; // length value\r\n\t\tvar code; // code value\r\n\t\tvar dist; // distance index\r\n\r\n\t\tif (static_dtree[0].dl !== 0) {\r\n\t\t\treturn; // ct_init already called\r\n\t\t}\r\n\r\n\t\tl_desc.dyn_tree = dyn_ltree;\r\n\t\tl_desc.static_tree = static_ltree;\r\n\t\tl_desc.extra_bits = extra_lbits;\r\n\t\tl_desc.extra_base = LITERALS + 1;\r\n\t\tl_desc.elems = L_CODES;\r\n\t\tl_desc.max_length = MAX_BITS;\r\n\t\tl_desc.max_code = 0;\r\n\r\n\t\td_desc.dyn_tree = dyn_dtree;\r\n\t\td_desc.static_tree = static_dtree;\r\n\t\td_desc.extra_bits = extra_dbits;\r\n\t\td_desc.extra_base = 0;\r\n\t\td_desc.elems = D_CODES;\r\n\t\td_desc.max_length = MAX_BITS;\r\n\t\td_desc.max_code = 0;\r\n\r\n\t\tbl_desc.dyn_tree = bl_tree;\r\n\t\tbl_desc.static_tree = null;\r\n\t\tbl_desc.extra_bits = extra_blbits;\r\n\t\tbl_desc.extra_base = 0;\r\n\t\tbl_desc.elems = BL_CODES;\r\n\t\tbl_desc.max_length = MAX_BL_BITS;\r\n\t\tbl_desc.max_code = 0;\r\n\r\n\t // Initialize the mapping length (0..255) -> length code (0..28)\r\n\t\tlength = 0;\r\n\t\tfor (code = 0; code < LENGTH_CODES - 1; code++) {\r\n\t\t\tbase_length[code] = length;\r\n\t\t\tfor (n = 0; n < (1 << extra_lbits[code]); n++) {\r\n\t\t\t\tlength_code[length++] = code;\r\n\t\t\t}\r\n\t\t}\r\n\t // Assert (length === 256, \"ct_init: length !== 256\");\r\n\r\n\t\t// Note that the length 255 (match length 258) can be represented\r\n\t\t// in two different ways: code 284 + 5 bits or code 285, so we\r\n\t\t// overwrite length_code[255] to use the best encoding:\r\n\t\tlength_code[length - 1] = code;\r\n\r\n\t\t// Initialize the mapping dist (0..32K) -> dist code (0..29) */\r\n\t\tdist = 0;\r\n\t\tfor (code = 0; code < 16; code++) {\r\n\t\t\tbase_dist[code] = dist;\r\n\t\t\tfor (n = 0; n < (1 << extra_dbits[code]); n++) {\r\n\t\t\t\tdist_code[dist++] = code;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Assert (dist === 256, \"ct_init: dist !== 256\");\r\n\t\t// from now on, all distances are divided by 128\r\n\t\tfor (dist >>= 7; code < D_CODES; code++) {\r\n\t\t\tbase_dist[code] = dist << 7;\r\n\t\t\tfor (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\r\n\t\t\t\tdist_code[256 + dist++] = code;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Assert (dist === 256, \"ct_init: 256+dist !== 512\");\r\n\r\n\t\t// Construct the codes of the static literal tree\r\n\t\tfor (bits = 0; bits <= MAX_BITS; bits++) {\r\n\t\t\tbl_count[bits] = 0;\r\n\t\t}\r\n\t\tn = 0;\r\n\t\twhile (n <= 143) {\r\n\t\t\tstatic_ltree[n++].dl = 8;\r\n\t\t\tbl_count[8]++;\r\n\t\t}\r\n\t\twhile (n <= 255) {\r\n\t\t\tstatic_ltree[n++].dl = 9;\r\n\t\t\tbl_count[9]++;\r\n\t\t}\r\n\t\twhile (n <= 279) {\r\n\t\t\tstatic_ltree[n++].dl = 7;\r\n\t\t\tbl_count[7]++;\r\n\t\t}\r\n\t\twhile (n <= 287) {\r\n\t\t\tstatic_ltree[n++].dl = 8;\r\n\t\t\tbl_count[8]++;\r\n\t\t}\r\n\t\t// Codes 286 and 287 do not exist, but we must include them in the\r\n\t\t// tree construction to get a canonical Huffman tree (longest code\r\n\t\t// all ones)\r\n\t\tgen_codes(static_ltree, L_CODES + 1);\r\n\r\n\t\t// The static distance tree is trivial: */\r\n\t\tfor (n = 0; n < D_CODES; n++) {\r\n\t\t\tstatic_dtree[n].dl = 5;\r\n\t\t\tstatic_dtree[n].fc = bi_reverse(n, 5);\r\n\t\t}\r\n\r\n\t\t// Initialize the first block of the first file:\r\n\t\tinit_block();\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Initialize a new block.\r\n\t */\r\n\tfunction init_block() {\r\n\t\tvar n; // iterates over tree elements\r\n\r\n\t\t// Initialize the trees.\r\n\t\tfor (n = 0; n < L_CODES;  n++) {\r\n\t\t\tdyn_ltree[n].fc = 0;\r\n\t\t}\r\n\t\tfor (n = 0; n < D_CODES;  n++) {\r\n\t\t\tdyn_dtree[n].fc = 0;\r\n\t\t}\r\n\t\tfor (n = 0; n < BL_CODES; n++) {\r\n\t\t\tbl_tree[n].fc = 0;\r\n\t\t}\r\n\r\n\t\tdyn_ltree[END_BLOCK].fc = 1;\r\n\t\topt_len = static_len = 0;\r\n\t\tlast_lit = last_dist = last_flags = 0;\r\n\t\tflags = 0;\r\n\t\tflag_bit = 1;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Restore the heap property by moving down the tree starting at node k,\r\n\t * exchanging a node with the smallest of its two sons if necessary, stopping\r\n\t * when the heap property is re-established (each father smaller than its\r\n\t * two sons).\r\n\t *\r\n\t * @param tree- tree to restore\r\n\t * @param k- node to move down\r\n\t */\r\n\tfunction pqdownheap(tree, k) {\r\n\t\tvar v = heap[k],\r\n\t\t\tj = k << 1; // left son of k\r\n\r\n\t\twhile (j <= heap_len) {\r\n\t\t\t// Set j to the smallest of the two sons:\r\n\t\t\tif (j < heap_len && SMALLER(tree, heap[j + 1], heap[j])) {\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\r\n\t\t\t// Exit if v is smaller than both sons\r\n\t\t\tif (SMALLER(tree, v, heap[j])) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Exchange v with the smallest son\r\n\t\t\theap[k] = heap[j];\r\n\t\t\tk = j;\r\n\r\n\t\t\t// And continue down the tree, setting j to the left son of k\r\n\t\t\tj <<= 1;\r\n\t\t}\r\n\t\theap[k] = v;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Compute the optimal bit lengths for a tree and update the total bit length\r\n\t * for the current block.\r\n\t * IN assertion: the fields freq and dad are set, heap[heap_max] and\r\n\t *    above are the tree nodes sorted by increasing frequency.\r\n\t * OUT assertions: the field len is set to the optimal bit length, the\r\n\t *     array bl_count contains the frequencies for each bit length.\r\n\t *     The length opt_len is updated; static_len is also updated if stree is\r\n\t *     not null.\r\n\t */\r\n\tfunction gen_bitlen(desc) { // the tree descriptor\r\n\t\tvar tree = desc.dyn_tree;\r\n\t\tvar extra = desc.extra_bits;\r\n\t\tvar base = desc.extra_base;\r\n\t\tvar max_code = desc.max_code;\r\n\t\tvar max_length = desc.max_length;\r\n\t\tvar stree = desc.static_tree;\r\n\t\tvar h; // heap index\r\n\t\tvar n, m; // iterate over the tree elements\r\n\t\tvar bits; // bit length\r\n\t\tvar xbits; // extra bits\r\n\t\tvar f; // frequency\r\n\t\tvar overflow = 0; // number of elements with bit length too large\r\n\r\n\t\tfor (bits = 0; bits <= MAX_BITS; bits++) {\r\n\t\t\tbl_count[bits] = 0;\r\n\t\t}\r\n\r\n\t\t// In a first pass, compute the optimal bit lengths (which may\r\n\t\t// overflow in the case of the bit length tree).\r\n\t\ttree[heap[heap_max]].dl = 0; // root of the heap\r\n\r\n\t\tfor (h = heap_max + 1; h < HEAP_SIZE; h++) {\r\n\t\t\tn = heap[h];\r\n\t\t\tbits = tree[tree[n].dl].dl + 1;\r\n\t\t\tif (bits > max_length) {\r\n\t\t\t\tbits = max_length;\r\n\t\t\t\toverflow++;\r\n\t\t\t}\r\n\t\t\ttree[n].dl = bits;\r\n\t\t\t// We overwrite tree[n].dl which is no longer needed\r\n\r\n\t\t\tif (n > max_code) {\r\n\t\t\t\tcontinue; // not a leaf node\r\n\t\t\t}\r\n\r\n\t\t\tbl_count[bits]++;\r\n\t\t\txbits = 0;\r\n\t\t\tif (n >= base) {\r\n\t\t\t\txbits = extra[n - base];\r\n\t\t\t}\r\n\t\t\tf = tree[n].fc;\r\n\t\t\topt_len += f * (bits + xbits);\r\n\t\t\tif (stree !== null) {\r\n\t\t\t\tstatic_len += f * (stree[n].dl + xbits);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (overflow === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// This happens for example on obj2 and pic of the Calgary corpus\r\n\r\n\t\t// Find the first bit length which could increase:\r\n\t\tdo {\r\n\t\t\tbits = max_length - 1;\r\n\t\t\twhile (bl_count[bits] === 0) {\r\n\t\t\t\tbits--;\r\n\t\t\t}\r\n\t\t\tbl_count[bits]--; // move one leaf down the tree\r\n\t\t\tbl_count[bits + 1] += 2; // move one overflow item as its brother\r\n\t\t\tbl_count[max_length]--;\r\n\t\t\t// The brother of the overflow item also moves one step up,\r\n\t\t\t// but this does not affect bl_count[max_length]\r\n\t\t\toverflow -= 2;\r\n\t\t} while (overflow > 0);\r\n\r\n\t\t// Now recompute all bit lengths, scanning in increasing frequency.\r\n\t\t// h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\r\n\t\t// lengths instead of fixing only the wrong ones. This idea is taken\r\n\t\t// from 'ar' written by Haruhiko Okumura.)\r\n\t\tfor (bits = max_length; bits !== 0; bits--) {\r\n\t\t\tn = bl_count[bits];\r\n\t\t\twhile (n !== 0) {\r\n\t\t\t\tm = heap[--h];\r\n\t\t\t\tif (m > max_code) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (tree[m].dl !== bits) {\r\n\t\t\t\t\topt_len += (bits - tree[m].dl) * tree[m].fc;\r\n\t\t\t\t\ttree[m].fc = bits;\r\n\t\t\t\t}\r\n\t\t\t\tn--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t  /* ==========================================================================\r\n\t   * Generate the codes for a given tree and bit counts (which need not be\r\n\t   * optimal).\r\n\t   * IN assertion: the array bl_count contains the bit length statistics for\r\n\t   * the given tree and the field len is set for all tree elements.\r\n\t   * OUT assertion: the field code is set for all tree elements of non\r\n\t   *     zero code length.\r\n\t   * @param tree- the tree to decorate\r\n\t   * @param max_code- largest code with non-zero frequency\r\n\t   */\r\n\tfunction gen_codes(tree, max_code) {\r\n\t\tvar next_code = []; // new Array(MAX_BITS + 1); // next code value for each bit length\r\n\t\tvar code = 0; // running code value\r\n\t\tvar bits; // bit index\r\n\t\tvar n; // code index\r\n\r\n\t\t// The distribution counts are first used to generate the code values\r\n\t\t// without bit reversal.\r\n\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\r\n\t\t\tcode = ((code + bl_count[bits - 1]) << 1);\r\n\t\t\tnext_code[bits] = code;\r\n\t\t}\r\n\r\n\t\t// Check that the bit counts in bl_count are consistent. The last code\r\n\t\t// must be all ones.\r\n\t\t// Assert (code + encoder->bl_count[MAX_BITS]-1 === (1<<MAX_BITS)-1, \"inconsistent bit counts\");\r\n\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\r\n\r\n\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\tvar len = tree[n].dl;\r\n\t\t\tif (len === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Now reverse the bits\r\n\t\t\ttree[n].fc = bi_reverse(next_code[len]++, len);\r\n\r\n\t\t\t// Tracec(tree !== static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \", n, (isgraph(n) ? n : ' '), len, tree[n].fc, next_code[len]-1));\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Construct one Huffman tree and assigns the code bit strings and lengths.\r\n\t * Update the total bit length for the current block.\r\n\t * IN assertion: the field freq is set for all tree elements.\r\n\t * OUT assertions: the fields len and code are set to the optimal bit length\r\n\t *     and corresponding code. The length opt_len is updated; static_len is\r\n\t *     also updated if stree is not null. The field max_code is set.\r\n\t */\r\n\tfunction build_tree(desc) { // the tree descriptor\r\n\t\tvar tree = desc.dyn_tree;\r\n\t\tvar stree = desc.static_tree;\r\n\t\tvar elems = desc.elems;\r\n\t\tvar n, m; // iterate over heap elements\r\n\t\tvar max_code = -1; // largest code with non zero frequency\r\n\t\tvar node = elems; // next internal node of the tree\r\n\r\n\t\t// Construct the initial heap, with least frequent element in\r\n\t\t// heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\r\n\t\t// heap[0] is not used.\r\n\t\theap_len = 0;\r\n\t\theap_max = HEAP_SIZE;\r\n\r\n\t\tfor (n = 0; n < elems; n++) {\r\n\t\t\tif (tree[n].fc !== 0) {\r\n\t\t\t\theap[++heap_len] = max_code = n;\r\n\t\t\t\tdepth[n] = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttree[n].dl = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The pkzip format requires that at least one distance code exists,\r\n\t\t// and that at least one bit should be sent even if there is only one\r\n\t\t// possible code. So to avoid special checks later on we force at least\r\n\t\t// two codes of non zero frequency.\r\n\t\twhile (heap_len < 2) {\r\n\t\t\tvar xnew = heap[++heap_len] = (max_code < 2 ? ++max_code : 0);\r\n\t\t\ttree[xnew].fc = 1;\r\n\t\t\tdepth[xnew] = 0;\r\n\t\t\topt_len--;\r\n\t\t\tif (stree !== null) {\r\n\t\t\t\tstatic_len -= stree[xnew].dl;\r\n\t\t\t}\r\n\t\t\t// new is 0 or 1 so it does not have extra bits\r\n\t\t}\r\n\t\tdesc.max_code = max_code;\r\n\r\n\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\r\n\t\t// establish sub-heaps of increasing lengths:\r\n\t\tfor (n = heap_len >> 1; n >= 1; n--) {\r\n\t\t\tpqdownheap(tree, n);\r\n\t\t}\r\n\r\n\t\t// Construct the Huffman tree by repeatedly combining the least two\r\n\t\t// frequent nodes.\r\n\t\tdo {\r\n\t\t\tn = heap[SMALLEST];\r\n\t\t\theap[SMALLEST] = heap[heap_len--];\r\n\t\t\tpqdownheap(tree, SMALLEST);\r\n\r\n\t\t\tm = heap[SMALLEST]; // m = node of next least frequency\r\n\r\n\t\t\t// keep the nodes sorted by frequency\r\n\t\t\theap[--heap_max] = n;\r\n\t\t\theap[--heap_max] = m;\r\n\r\n\t\t\t// Create a new node father of n and m\r\n\t\t\ttree[node].fc = tree[n].fc + tree[m].fc;\r\n\t\t\t//\tdepth[node] = (char)(MAX(depth[n], depth[m]) + 1);\r\n\t\t\tif (depth[n] > depth[m] + 1) {\r\n\t\t\t\tdepth[node] = depth[n];\r\n\t\t\t} else {\r\n\t\t\t\tdepth[node] = depth[m] + 1;\r\n\t\t\t}\r\n\t\t\ttree[n].dl = tree[m].dl = node;\r\n\r\n\t\t\t// and insert the new node in the heap\r\n\t\t\theap[SMALLEST] = node++;\r\n\t\t\tpqdownheap(tree, SMALLEST);\r\n\r\n\t\t} while (heap_len >= 2);\r\n\r\n\t\theap[--heap_max] = heap[SMALLEST];\r\n\r\n\t\t// At this point, the fields freq and dad are set. We can now\r\n\t\t// generate the bit lengths.\r\n\t\tgen_bitlen(desc);\r\n\r\n\t\t// The field len is now set, we can generate the bit codes\r\n\t\tgen_codes(tree, max_code);\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Scan a literal or distance tree to determine the frequencies of the codes\r\n\t * in the bit length tree. Updates opt_len to take into account the repeat\r\n\t * counts. (The contribution of the bit length codes will be added later\r\n\t * during the construction of bl_tree.)\r\n\t *\r\n\t * @param tree- the tree to be scanned\r\n\t * @param max_code- and its largest code of non zero frequency\r\n\t */\r\n\tfunction scan_tree(tree, max_code) {\r\n\t\tvar n, // iterates over all tree elements\r\n\t\t\tprevlen = -1, // last emitted length\r\n\t\t\tcurlen, // length of current code\r\n\t\t\tnextlen = tree[0].dl, // length of next code\r\n\t\t\tcount = 0, // repeat count of the current code\r\n\t\t\tmax_count = 7, // max repeat count\r\n\t\t\tmin_count = 4; // min repeat count\r\n\r\n\t\tif (nextlen === 0) {\r\n\t\t\tmax_count = 138;\r\n\t\t\tmin_count = 3;\r\n\t\t}\r\n\t\ttree[max_code + 1].dl = 0xffff; // guard\r\n\r\n\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\tcurlen = nextlen;\r\n\t\t\tnextlen = tree[n + 1].dl;\r\n\t\t\tif (++count < max_count && curlen === nextlen) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (count < min_count) {\r\n\t\t\t\tbl_tree[curlen].fc += count;\r\n\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\tif (curlen !== prevlen) {\r\n\t\t\t\t\tbl_tree[curlen].fc++;\r\n\t\t\t\t}\r\n\t\t\t\tbl_tree[REP_3_6].fc++;\r\n\t\t\t} else if (count <= 10) {\r\n\t\t\t\tbl_tree[REPZ_3_10].fc++;\r\n\t\t\t} else {\r\n\t\t\t\tbl_tree[REPZ_11_138].fc++;\r\n\t\t\t}\r\n\t\t\tcount = 0; prevlen = curlen;\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t} else if (curlen === nextlen) {\r\n\t\t\t\tmax_count = 6;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t} else {\r\n\t\t\t\tmax_count = 7;\r\n\t\t\t\tmin_count = 4;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Send a literal or distance tree in compressed form, using the codes in\r\n\t * bl_tree.\r\n\t *\r\n\t * @param tree- the tree to be scanned\r\n\t * @param max_code- and its largest code of non zero frequency\r\n\t */\r\n\tfunction send_tree(tree, max_code) {\r\n\t\tvar n; // iterates over all tree elements\r\n\t\tvar prevlen = -1; // last emitted length\r\n\t\tvar curlen; // length of current code\r\n\t\tvar nextlen = tree[0].dl; // length of next code\r\n\t\tvar count = 0; // repeat count of the current code\r\n\t\tvar max_count = 7; // max repeat count\r\n\t\tvar min_count = 4; // min repeat count\r\n\r\n\t\t// tree[max_code+1].dl = -1; */  /* guard already set */\r\n\t\tif (nextlen === 0) {\r\n\t\t\tmax_count = 138;\r\n\t\t\tmin_count = 3;\r\n\t\t}\r\n\r\n\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\tcurlen = nextlen;\r\n\t\t\tnextlen = tree[n + 1].dl;\r\n\t\t\tif (++count < max_count && curlen === nextlen) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (count < min_count) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\tSEND_CODE(curlen, bl_tree);\r\n\t\t\t\t} while (--count !== 0);\r\n\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\tif (curlen !== prevlen) {\r\n\t\t\t\t\tSEND_CODE(curlen, bl_tree);\r\n\t\t\t\t\tcount--;\r\n\t\t\t\t}\r\n\t\t\t// Assert(count >= 3 && count <= 6, \" 3_6?\");\r\n\t\t\t\tSEND_CODE(REP_3_6, bl_tree);\r\n\t\t\t\tsend_bits(count - 3, 2);\r\n\t\t\t} else if (count <= 10) {\r\n\t\t\t\tSEND_CODE(REPZ_3_10, bl_tree);\r\n\t\t\t\tsend_bits(count - 3, 3);\r\n\t\t\t} else {\r\n\t\t\t\tSEND_CODE(REPZ_11_138, bl_tree);\r\n\t\t\t\tsend_bits(count - 11, 7);\r\n\t\t\t}\r\n\t\t\tcount = 0;\r\n\t\t\tprevlen = curlen;\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t} else if (curlen === nextlen) {\r\n\t\t\t\tmax_count = 6;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t} else {\r\n\t\t\t\tmax_count = 7;\r\n\t\t\t\tmin_count = 4;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Construct the Huffman tree for the bit lengths and return the index in\r\n\t * bl_order of the last bit length code to send.\r\n\t */\r\n\tfunction build_bl_tree() {\r\n\t\tvar max_blindex; // index of last bit length code of non zero freq\r\n\r\n\t\t// Determine the bit length frequencies for literal and distance trees\r\n\t\tscan_tree(dyn_ltree, l_desc.max_code);\r\n\t\tscan_tree(dyn_dtree, d_desc.max_code);\r\n\r\n\t\t// Build the bit length tree:\r\n\t\tbuild_tree(bl_desc);\r\n\t\t// opt_len now includes the length of the tree representations, except\r\n\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\r\n\r\n\t\t// Determine the number of bit length codes to send. The pkzip format\r\n\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\r\n\t\t// 3 but the actual value used is 4.)\r\n\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\r\n\t\t\tif (bl_tree[bl_order[max_blindex]].dl !== 0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Update opt_len to include the bit length tree and counts */\r\n\t\topt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\r\n\t\t// Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\r\n\t\t// encoder->opt_len, encoder->static_len));\r\n\r\n\t\treturn max_blindex;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Send the header for a block using dynamic Huffman trees: the counts, the\r\n\t * lengths of the bit length codes, the literal tree and the distance tree.\r\n\t * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\r\n\t */\r\n\tfunction send_all_trees(lcodes, dcodes, blcodes) { // number of codes for each tree\r\n\t\tvar rank; // index in bl_order\r\n\r\n\t\t// Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\r\n\t\t// Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES, \"too many codes\");\r\n\t\t// Tracev((stderr, \"\\nbl counts: \"));\r\n\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\r\n\t\tsend_bits(dcodes - 1,   5);\r\n\t\tsend_bits(blcodes - 4,  4); // not -3 as stated in appnote.txt\r\n\t\tfor (rank = 0; rank < blcodes; rank++) {\r\n\t\t\t// Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\r\n\t\t\tsend_bits(bl_tree[bl_order[rank]].dl, 3);\r\n\t\t}\r\n\r\n\t\t// send the literal tree\r\n\t\tsend_tree(dyn_ltree, lcodes - 1);\r\n\r\n\t\t// send the distance tree\r\n\t\tsend_tree(dyn_dtree, dcodes - 1);\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Determine the best encoding for the current block: dynamic trees, static\r\n\t * trees or store, and output the encoded block to the zip file.\r\n\t */\r\n\tfunction flush_block(eof) { // true if this is the last block for a file\r\n\t\tvar opt_lenb, static_lenb, // opt_len and static_len in bytes\r\n\t\t\tmax_blindex, // index of last bit length code of non zero freq\r\n\t\t\tstored_len, // length of input block\r\n\t\t\ti;\r\n\r\n\t\tstored_len = strstart - block_start;\r\n\t\tflag_buf[last_flags] = flags; // Save the flags for the last 8 items\r\n\r\n\t\t// Construct the literal and distance trees\r\n\t\tbuild_tree(l_desc);\r\n\t\t// Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\",\r\n\t\t// encoder->opt_len, encoder->static_len));\r\n\r\n\t\tbuild_tree(d_desc);\r\n\t\t// Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\",\r\n\t\t// encoder->opt_len, encoder->static_len));\r\n\t\t// At this point, opt_len and static_len are the total bit lengths of\r\n\t\t// the compressed block data, excluding the tree representations.\r\n\r\n\t\t// Build the bit length tree for the above two trees, and get the index\r\n\t\t// in bl_order of the last bit length code to send.\r\n\t\tmax_blindex = build_bl_tree();\r\n\r\n\t // Determine the best encoding. Compute first the block length in bytes\r\n\t\topt_lenb = (opt_len + 3 + 7) >> 3;\r\n\t\tstatic_lenb = (static_len + 3 + 7) >> 3;\r\n\r\n\t//  Trace((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u \", opt_lenb, encoder->opt_len, static_lenb, encoder->static_len, stored_len, encoder->last_lit, encoder->last_dist));\r\n\r\n\t\tif (static_lenb <= opt_lenb) {\r\n\t\t\topt_lenb = static_lenb;\r\n\t\t}\r\n\t\tif (stored_len + 4 <= opt_lenb && block_start >= 0) { // 4: two words for the lengths\r\n\t\t\t// The test buf !== NULL is only necessary if LIT_BUFSIZE > WSIZE.\r\n\t\t\t// Otherwise we can't have processed more than WSIZE input bytes since\r\n\t\t\t// the last block flush, because compression would have been\r\n\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\r\n\t\t\t// transform a block into a stored block.\r\n\t\t\tsend_bits((STORED_BLOCK << 1) + eof, 3);  /* send block type */\r\n\t\t\tbi_windup();         /* align on byte boundary */\r\n\t\t\tput_short(stored_len);\r\n\t\t\tput_short(~stored_len);\r\n\r\n\t\t\t// copy block\r\n\t\t\t/*\r\n\t\t\t\tp = &window[block_start];\r\n\t\t\t\tfor (i = 0; i < stored_len; i++) {\r\n\t\t\t\t\tput_byte(p[i]);\r\n\t\t\t\t}\r\n\t\t\t*/\r\n\t\t\tfor (i = 0; i < stored_len; i++) {\r\n\t\t\t\tput_byte(window[block_start + i]);\r\n\t\t\t}\r\n\t\t} else if (static_lenb === opt_lenb) {\r\n\t\t\tsend_bits((STATIC_TREES << 1) + eof, 3);\r\n\t\t\tcompress_block(static_ltree, static_dtree);\r\n\t\t} else {\r\n\t\t\tsend_bits((DYN_TREES << 1) + eof, 3);\r\n\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\r\n\t\t\tcompress_block(dyn_ltree, dyn_dtree);\r\n\t\t}\r\n\r\n\t\tinit_block();\r\n\r\n\t\tif (eof !== 0) {\r\n\t\t\tbi_windup();\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Save the match info and tally the frequency counts. Return true if\r\n\t * the current block must be flushed.\r\n\t *\r\n\t * @param dist- distance of matched string\r\n\t * @param lc- (match length - MIN_MATCH) or unmatched char (if dist === 0)\r\n\t */\r\n\tfunction ct_tally(dist, lc) {\r\n\t\tl_buf[last_lit++] = lc;\r\n\t\tif (dist === 0) {\r\n\t\t\t// lc is the unmatched char\r\n\t\t\tdyn_ltree[lc].fc++;\r\n\t\t} else {\r\n\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\tdist--; // dist = match distance - 1\r\n\t\t\t// Assert((ush)dist < (ush)MAX_DIST && (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) && (ush)D_CODE(dist) < (ush)D_CODES,  \"ct_tally: bad match\");\r\n\r\n\t\t\tdyn_ltree[length_code[lc] + LITERALS + 1].fc++;\r\n\t\t\tdyn_dtree[D_CODE(dist)].fc++;\r\n\r\n\t\t\td_buf[last_dist++] = dist;\r\n\t\t\tflags |= flag_bit;\r\n\t\t}\r\n\t\tflag_bit <<= 1;\r\n\r\n\t\t// Output the flags if they fill a byte\r\n\t\tif ((last_lit & 7) === 0) {\r\n\t\t\tflag_buf[last_flags++] = flags;\r\n\t\t\tflags = 0;\r\n\t\t\tflag_bit = 1;\r\n\t\t}\r\n\t\t// Try to guess if it is profitable to stop the current block here\r\n\t\tif (compr_level > 2 && (last_lit & 0xfff) === 0) {\r\n\t\t\t// Compute an upper bound for the compressed length\r\n\t\t\tvar out_length = last_lit * 8;\r\n\t\t\tvar in_length = strstart - block_start;\r\n\t\t\tvar dcode;\r\n\r\n\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\r\n\t\t\t\tout_length += dyn_dtree[dcode].fc * (5 + extra_dbits[dcode]);\r\n\t\t\t}\r\n\t\t\tout_length >>= 3;\r\n\t\t\t// Trace((stderr,\"\\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) \", encoder->last_lit, encoder->last_dist, in_length, out_length, 100L - out_length*100L/in_length));\r\n\t\t\tif (last_dist < parseInt(last_lit / 2, 10) && out_length < parseInt(in_length / 2, 10)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (last_lit === LIT_BUFSIZE - 1 || last_dist === DIST_BUFSIZE);\r\n\t\t// We avoid equality with LIT_BUFSIZE because of wraparound at 64K\r\n\t\t// on 16 bit machines and because stored blocks are restricted to\r\n\t\t// 64K-1 bytes.\r\n\t}\r\n\r\n\t  /* ==========================================================================\r\n\t   * Send the block data compressed using the given Huffman trees\r\n\t   *\r\n\t   * @param ltree- literal tree\r\n\t   * @param dtree- distance tree\r\n\t   */\r\n\tfunction compress_block(ltree, dtree) {\r\n\t\tvar dist; // distance of matched string\r\n\t\tvar lc; // match length or unmatched char (if dist === 0)\r\n\t\tvar lx = 0; // running index in l_buf\r\n\t\tvar dx = 0; // running index in d_buf\r\n\t\tvar fx = 0; // running index in flag_buf\r\n\t\tvar flag = 0; // current flags\r\n\t\tvar code; // the code to send\r\n\t\tvar extra; // number of extra bits to send\r\n\r\n\t\tif (last_lit !== 0) {\r\n\t\t\tdo {\r\n\t\t\t\tif ((lx & 7) === 0) {\r\n\t\t\t\t\tflag = flag_buf[fx++];\r\n\t\t\t\t}\r\n\t\t\t\tlc = l_buf[lx++] & 0xff;\r\n\t\t\t\tif ((flag & 1) === 0) {\r\n\t\t\t\t\tSEND_CODE(lc, ltree); /* send a literal byte */\r\n\t\t\t\t\t//\tTracecv(isgraph(lc), (stderr,\" '%c' \", lc));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\t\t\tcode = length_code[lc];\r\n\t\t\t\t\tSEND_CODE(code + LITERALS + 1, ltree); // send the length code\r\n\t\t\t\t\textra = extra_lbits[code];\r\n\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\tlc -= base_length[code];\r\n\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdist = d_buf[dx++];\r\n\t\t\t\t\t// Here, dist is the match distance - 1\r\n\t\t\t\t\tcode = D_CODE(dist);\r\n\t\t\t\t\t//\tAssert (code < D_CODES, \"bad d_code\");\r\n\r\n\t\t\t\t\tSEND_CODE(code, dtree); // send the distance code\r\n\t\t\t\t\textra = extra_dbits[code];\r\n\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\tdist -= base_dist[code];\r\n\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\r\n\t\t\t\t\t}\r\n\t\t\t\t} // literal or match pair ?\r\n\t\t\t\tflag >>= 1;\r\n\t\t\t} while (lx < last_lit);\r\n\t\t}\r\n\r\n\t\tSEND_CODE(END_BLOCK, ltree);\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Send a value on a given number of bits.\r\n\t * IN assertion: length <= 16 and value fits in length bits.\r\n\t *\r\n\t * @param value- value to send\r\n\t * @param length- number of bits\r\n\t */\r\n\tvar Buf_size = 16; // bit size of bi_buf\r\n\tfunction send_bits(value, length) {\r\n\t\t// If not enough room in bi_buf, use (valid) bits from bi_buf and\r\n\t\t// (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))\r\n\t\t// unused bits in value.\r\n\t\tif (bi_valid > Buf_size - length) {\r\n\t\t\tbi_buf |= (value << bi_valid);\r\n\t\t\tput_short(bi_buf);\r\n\t\t\tbi_buf = (value >> (Buf_size - bi_valid));\r\n\t\t\tbi_valid += length - Buf_size;\r\n\t\t} else {\r\n\t\t\tbi_buf |= value << bi_valid;\r\n\t\t\tbi_valid += length;\r\n\t\t}\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Reverse the first len bits of a code, using straightforward code (a faster\r\n\t * method would use a table)\r\n\t * IN assertion: 1 <= len <= 15\r\n\t *\r\n\t * @param code- the value to invert\r\n\t * @param len- its bit length\r\n\t */\r\n\tfunction bi_reverse(code, len) {\r\n\t\tvar res = 0;\r\n\t\tdo {\r\n\t\t\tres |= code & 1;\r\n\t\t\tcode >>= 1;\r\n\t\t\tres <<= 1;\r\n\t\t} while (--len > 0);\r\n\t\treturn res >> 1;\r\n\t}\r\n\r\n\t/* ==========================================================================\r\n\t * Write out any remaining bits in an incomplete byte.\r\n\t */\r\n\tfunction bi_windup() {\r\n\t\tif (bi_valid > 8) {\r\n\t\t\tput_short(bi_buf);\r\n\t\t} else if (bi_valid > 0) {\r\n\t\t\tput_byte(bi_buf);\r\n\t\t}\r\n\t\tbi_buf = 0;\r\n\t\tbi_valid = 0;\r\n\t}\r\n\r\n\tfunction qoutbuf() {\r\n\t\tvar q, i;\r\n\t\tif (outcnt !== 0) {\r\n\t\t\tq = new_queue();\r\n\t\t\tif (qhead === null) {\r\n\t\t\t\tqhead = qtail = q;\r\n\t\t\t} else {\r\n\t\t\t\tqtail = qtail.next = q;\r\n\t\t\t}\r\n\t\t\tq.len = outcnt - outoff;\r\n\t\t\t// System.arraycopy(outbuf, outoff, q.ptr, 0, q.len);\r\n\t\t\tfor (i = 0; i < q.len; i++) {\r\n\t\t\t\tq.ptr[i] = outbuf[outoff + i];\r\n\t\t\t}\r\n\t\t\toutcnt = outoff = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deflate(arr, level) {\r\n\t\tvar i, j, buff;\r\n\r\n\t\tdeflate_data = arr;\r\n\t\tdeflate_pos = 0;\r\n\t\tif (typeof level === \"undefined\") {\r\n\t\t\tlevel = DEFAULT_LEVEL;\r\n\t\t}\r\n\t\tdeflate_start(level);\r\n\r\n\t\tbuff = [];\r\n\r\n\t\tdo {\r\n\t\t\ti = deflate_internal(buff, buff.length, 1024);\r\n\t\t} while (i > 0);\r\n\r\n\t\tdeflate_data = null; // G.C.\r\n\t\treturn buff;\r\n\t}\r\n\r\n\tmodule.exports = deflate;\r\n\tmodule.exports.DEFAULT_LEVEL = DEFAULT_LEVEL;\r\n}());\r\n"]}