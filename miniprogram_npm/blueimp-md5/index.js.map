{"version":3,"sources":["md5.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*\r\n * JavaScript MD5\r\n * https://github.com/blueimp/JavaScript-MD5\r\n *\r\n * Copyright 2011, Sebastian Tschan\r\n * https://blueimp.net\r\n *\r\n * Licensed under the MIT license:\r\n * https://opensource.org/licenses/MIT\r\n *\r\n * Based on\r\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n * Digest Algorithm, as defined in RFC 1321.\r\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for more info.\r\n */\r\n\r\n/* global define */\r\n\r\n/* eslint-disable strict */\r\n\r\n;(function ($) {\r\n  \r\n\r\n  /**\r\n   * Add integers, wrapping at 2^32.\r\n   * This uses 16-bit operations internally to work around bugs in interpreters.\r\n   *\r\n   * @param {number} x First integer\r\n   * @param {number} y Second integer\r\n   * @returns {number} Sum\r\n   */\r\n  function safeAdd(x, y) {\r\n    var lsw = (x & 0xffff) + (y & 0xffff)\r\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\r\n    return (msw << 16) | (lsw & 0xffff)\r\n  }\r\n\r\n  /**\r\n   * Bitwise rotate a 32-bit number to the left.\r\n   *\r\n   * @param {number} num 32-bit number\r\n   * @param {number} cnt Rotation count\r\n   * @returns {number} Rotated number\r\n   */\r\n  function bitRotateLeft(num, cnt) {\r\n    return (num << cnt) | (num >>> (32 - cnt))\r\n  }\r\n\r\n  /**\r\n   * Basic operation the algorithm uses.\r\n   *\r\n   * @param {number} q q\r\n   * @param {number} a a\r\n   * @param {number} b b\r\n   * @param {number} x x\r\n   * @param {number} s s\r\n   * @param {number} t t\r\n   * @returns {number} Result\r\n   */\r\n  function md5cmn(q, a, b, x, s, t) {\r\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\r\n  }\r\n  /**\r\n   * Basic operation the algorithm uses.\r\n   *\r\n   * @param {number} a a\r\n   * @param {number} b b\r\n   * @param {number} c c\r\n   * @param {number} d d\r\n   * @param {number} x x\r\n   * @param {number} s s\r\n   * @param {number} t t\r\n   * @returns {number} Result\r\n   */\r\n  function md5ff(a, b, c, d, x, s, t) {\r\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t)\r\n  }\r\n  /**\r\n   * Basic operation the algorithm uses.\r\n   *\r\n   * @param {number} a a\r\n   * @param {number} b b\r\n   * @param {number} c c\r\n   * @param {number} d d\r\n   * @param {number} x x\r\n   * @param {number} s s\r\n   * @param {number} t t\r\n   * @returns {number} Result\r\n   */\r\n  function md5gg(a, b, c, d, x, s, t) {\r\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)\r\n  }\r\n  /**\r\n   * Basic operation the algorithm uses.\r\n   *\r\n   * @param {number} a a\r\n   * @param {number} b b\r\n   * @param {number} c c\r\n   * @param {number} d d\r\n   * @param {number} x x\r\n   * @param {number} s s\r\n   * @param {number} t t\r\n   * @returns {number} Result\r\n   */\r\n  function md5hh(a, b, c, d, x, s, t) {\r\n    return md5cmn(b ^ c ^ d, a, b, x, s, t)\r\n  }\r\n  /**\r\n   * Basic operation the algorithm uses.\r\n   *\r\n   * @param {number} a a\r\n   * @param {number} b b\r\n   * @param {number} c c\r\n   * @param {number} d d\r\n   * @param {number} x x\r\n   * @param {number} s s\r\n   * @param {number} t t\r\n   * @returns {number} Result\r\n   */\r\n  function md5ii(a, b, c, d, x, s, t) {\r\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t)\r\n  }\r\n\r\n  /**\r\n   * Calculate the MD5 of an array of little-endian words, and a bit length.\r\n   *\r\n   * @param {Array} x Array of little-endian words\r\n   * @param {number} len Bit length\r\n   * @returns {Array<number>} MD5 Array\r\n   */\r\n  function binlMD5(x, len) {\r\n    /* append padding */\r\n    x[len >> 5] |= 0x80 << len % 32\r\n    x[(((len + 64) >>> 9) << 4) + 14] = len\r\n\r\n    var i\r\n    var olda\r\n    var oldb\r\n    var oldc\r\n    var oldd\r\n    var a = 1732584193\r\n    var b = -271733879\r\n    var c = -1732584194\r\n    var d = 271733878\r\n\r\n    for (i = 0; i < x.length; i += 16) {\r\n      olda = a\r\n      oldb = b\r\n      oldc = c\r\n      oldd = d\r\n\r\n      a = md5ff(a, b, c, d, x[i], 7, -680876936)\r\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\r\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\r\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\r\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\r\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\r\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\r\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\r\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\r\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\r\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\r\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\r\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\r\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\r\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\r\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\r\n\r\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\r\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\r\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\r\n      b = md5gg(b, c, d, a, x[i], 20, -373897302)\r\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\r\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\r\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\r\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\r\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\r\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\r\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\r\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\r\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\r\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\r\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\r\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\r\n\r\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\r\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\r\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\r\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\r\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\r\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\r\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\r\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\r\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\r\n      d = md5hh(d, a, b, c, x[i], 11, -358537222)\r\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\r\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\r\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\r\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\r\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\r\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\r\n\r\n      a = md5ii(a, b, c, d, x[i], 6, -198630844)\r\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\r\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\r\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\r\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\r\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\r\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\r\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\r\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\r\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\r\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\r\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\r\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\r\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\r\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\r\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\r\n\r\n      a = safeAdd(a, olda)\r\n      b = safeAdd(b, oldb)\r\n      c = safeAdd(c, oldc)\r\n      d = safeAdd(d, oldd)\r\n    }\r\n    return [a, b, c, d]\r\n  }\r\n\r\n  /**\r\n   * Convert an array of little-endian words to a string\r\n   *\r\n   * @param {Array<number>} input MD5 Array\r\n   * @returns {string} MD5 string\r\n   */\r\n  function binl2rstr(input) {\r\n    var i\r\n    var output = ''\r\n    var length32 = input.length * 32\r\n    for (i = 0; i < length32; i += 8) {\r\n      output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff)\r\n    }\r\n    return output\r\n  }\r\n\r\n  /**\r\n   * Convert a raw string to an array of little-endian words\r\n   * Characters >255 have their high-byte silently ignored.\r\n   *\r\n   * @param {string} input Raw input string\r\n   * @returns {Array<number>} Array of little-endian words\r\n   */\r\n  function rstr2binl(input) {\r\n    var i\r\n    var output = []\r\n    output[(input.length >> 2) - 1] = undefined\r\n    for (i = 0; i < output.length; i += 1) {\r\n      output[i] = 0\r\n    }\r\n    var length8 = input.length * 8\r\n    for (i = 0; i < length8; i += 8) {\r\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32\r\n    }\r\n    return output\r\n  }\r\n\r\n  /**\r\n   * Calculate the MD5 of a raw string\r\n   *\r\n   * @param {string} s Input string\r\n   * @returns {string} Raw MD5 string\r\n   */\r\n  function rstrMD5(s) {\r\n    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\r\n  }\r\n\r\n  /**\r\n   * Calculates the HMAC-MD5 of a key and some data (raw strings)\r\n   *\r\n   * @param {string} key HMAC key\r\n   * @param {string} data Raw input string\r\n   * @returns {string} Raw MD5 string\r\n   */\r\n  function rstrHMACMD5(key, data) {\r\n    var i\r\n    var bkey = rstr2binl(key)\r\n    var ipad = []\r\n    var opad = []\r\n    var hash\r\n    ipad[15] = opad[15] = undefined\r\n    if (bkey.length > 16) {\r\n      bkey = binlMD5(bkey, key.length * 8)\r\n    }\r\n    for (i = 0; i < 16; i += 1) {\r\n      ipad[i] = bkey[i] ^ 0x36363636\r\n      opad[i] = bkey[i] ^ 0x5c5c5c5c\r\n    }\r\n    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\r\n    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\r\n  }\r\n\r\n  /**\r\n   * Convert a raw string to a hex string\r\n   *\r\n   * @param {string} input Raw input string\r\n   * @returns {string} Hex encoded string\r\n   */\r\n  function rstr2hex(input) {\r\n    var hexTab = '0123456789abcdef'\r\n    var output = ''\r\n    var x\r\n    var i\r\n    for (i = 0; i < input.length; i += 1) {\r\n      x = input.charCodeAt(i)\r\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)\r\n    }\r\n    return output\r\n  }\r\n\r\n  /**\r\n   * Encode a string as UTF-8\r\n   *\r\n   * @param {string} input Input string\r\n   * @returns {string} UTF8 string\r\n   */\r\n  function str2rstrUTF8(input) {\r\n    return unescape(encodeURIComponent(input))\r\n  }\r\n\r\n  /**\r\n   * Encodes input string as raw MD5 string\r\n   *\r\n   * @param {string} s Input string\r\n   * @returns {string} Raw MD5 string\r\n   */\r\n  function rawMD5(s) {\r\n    return rstrMD5(str2rstrUTF8(s))\r\n  }\r\n  /**\r\n   * Encodes input string as Hex encoded string\r\n   *\r\n   * @param {string} s Input string\r\n   * @returns {string} Hex encoded string\r\n   */\r\n  function hexMD5(s) {\r\n    return rstr2hex(rawMD5(s))\r\n  }\r\n  /**\r\n   * Calculates the raw HMAC-MD5 for the given key and data\r\n   *\r\n   * @param {string} k HMAC key\r\n   * @param {string} d Input string\r\n   * @returns {string} Raw MD5 string\r\n   */\r\n  function rawHMACMD5(k, d) {\r\n    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\r\n  }\r\n  /**\r\n   * Calculates the Hex encoded HMAC-MD5 for the given key and data\r\n   *\r\n   * @param {string} k HMAC key\r\n   * @param {string} d Input string\r\n   * @returns {string} Raw MD5 string\r\n   */\r\n  function hexHMACMD5(k, d) {\r\n    return rstr2hex(rawHMACMD5(k, d))\r\n  }\r\n\r\n  /**\r\n   * Calculates MD5 value for a given string.\r\n   * If a key is provided, calculates the HMAC-MD5 value.\r\n   * Returns a Hex encoded string unless the raw argument is given.\r\n   *\r\n   * @param {string} string Input string\r\n   * @param {string} [key] HMAC key\r\n   * @param {boolean} [raw] Raw output switch\r\n   * @returns {string} MD5 output\r\n   */\r\n  function md5(string, key, raw) {\r\n    if (!key) {\r\n      if (!raw) {\r\n        return hexMD5(string)\r\n      }\r\n      return rawMD5(string)\r\n    }\r\n    if (!raw) {\r\n      return hexHMACMD5(key, string)\r\n    }\r\n    return rawHMACMD5(key, string)\r\n  }\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () {\r\n      return md5\r\n    })\r\n  } else if (typeof module === 'object' && module.exports) {\r\n    module.exports = md5\r\n  } else {\r\n    $.md5 = md5\r\n  }\r\n})(this)\r\n"]}